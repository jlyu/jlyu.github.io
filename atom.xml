<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chain&#39;s Blog</title>
  
  <subtitle>Senior Developer, Translator, Trainer, ...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jlyu.github.io/"/>
  <updated>2018-08-26T12:36:10.603Z</updated>
  <id>https://jlyu.github.io/</id>
  
  <author>
    <name>Chain Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人体改造·第一阶段</title>
    <link href="https://jlyu.github.io/2018/08/08/2018-08-08-body-transformation-stage-1/"/>
    <id>https://jlyu.github.io/2018/08/08/2018-08-08-body-transformation-stage-1/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-26T12:36:10.603Z</updated>
    
    <content type="html"><![CDATA[<p>回顾人生，时光匆匆，10年已过。<br>作为成就，达成不少，略过不表。</p><p>至此，想规划未来10年的人生，将来能够活得轻松安全一些，那么现在就有必要对自己重新审视，付诸行动改造自己。<br>一个比较初略未熟的想法：先重塑自己的肉体，再充实自己的大脑，。。。</p><h4 id="人体改造·第一阶段-2018-07-开始"><a href="#人体改造·第一阶段-2018-07-开始" class="headerlink" title="人体改造·第一阶段 2018.07 开始"></a>人体改造·第一阶段 2018.07 开始</h4><ul><li><p>目标（Target）  <code>人体改造</code> </p></li><li><p>量化（Quantification） </p><ul><li>每天饮水量 2333 ml</li><li>每天步行数 10000 步</li><li>工作日晚餐减量，配合吃 150g 鸡胸肉</li><li>每周夜跑4-5次，每次4公里（第一阶段400公里）  </li><li>睡眠时间段修正：1：00 ~ 8：00（±2） </li></ul></li><li><p>改进（Improvement）</p><ul><li>暂无  </li></ul></li><li><p>验证（Evaluation）</p><ul><li>第一阶段：跑步跑完 400 公里，体重降至 60 KG </li></ul></li></ul><h4 id="每周零碎的记录"><a href="#每周零碎的记录" class="headerlink" title="每周零碎的记录"></a>每周零碎的记录</h4><blockquote><p>W1. 每天要喝2333ml量的水的这个目标还是挺难做到的; 今天状态不佳。また強くなりたくなったよ; 同学聚会归来。非常的嗨皮 ​​​​</p></blockquote><blockquote><p>W2. 逐渐开始改变; 事情一件一件地搞定，逐个击破，排好顺序，不急不慌不乱; ​​​​今晚研究了一个项目管理的软件，在Win7下没搞定，在Linux下搞定了。。 ​​​​心神俱疲，洗洗睡了; 7月日均步行破万，奶思。喝水日均算下来也有1000了。睡眠时间带逐渐纠正中… 喝水目标好难达成啊</p></blockquote><blockquote><p>W3. 自我感觉脸色开始好起来了…改变很缓慢，但的确感觉到了…初期阶段宁愿慢一点，简单一点 ​。我的肉肉正以 0.1KG/天 的速度离开我 [拜拜] 先把人体炼成，其他的慢慢来。慢就是快 ​​​​</p></blockquote><blockquote><p>W4. 今天魔都暴雨，导致了今天数据个方面不太漂亮。不过从周来看，目标平均达标的。而且已经第四周了，改变还不是很明显。除了更加迷之自信以外，每件事每个项目都在往前推进。眼下还是改造身体最为优先事项。下雨☔️台风天🌀休息♨️  </p></blockquote><blockquote><p>W5. 最重要的事情只有一件。但生活教会我重要的事情不止一件，今年开始生活难度指数徒增数倍。チェーンの数多ければ多いほど、掟が厳しくなければ厳しいほどそのうち跳ね返ってくる力もまた強くなる。今は苦痛しか感じられないが決して、その日が来る為に必死に耐えてみせる ​​​​.现在的付出是为了2-3年后的收割，正如现在的我享受着2-3年的投资。 ​​​​</p></blockquote><h4 id="夜跑记录"><a href="#夜跑记录" class="headerlink" title="夜跑记录"></a>夜跑记录</h4><p><img src="/images/2018/07/1807RUN.m.jpg" alt="第1-9次起跑" title="第1-9次起跑"><img src="/images/2018/08/1808RUN.m.jpg" alt="第10-18次起跑" title="第10-18次起跑"></p><a id="more"></a><h4 id="每月总结"><a href="#每月总结" class="headerlink" title="每月总结"></a>每月总结</h4><p><img src="/images/2018/07/healthView.1807.jpg" alt="1807" title="1807"></p><p>图片归档记录<br><a href="/images/2018/healthView.1807.jpg">1807</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回顾人生，时光匆匆，10年已过。&lt;br&gt;作为成就，达成不少，略过不表。&lt;/p&gt;
&lt;p&gt;至此，想规划未来10年的人生，将来能够活得轻松安全一些，那么现在就有必要对自己重新审视，付诸行动改造自己。&lt;br&gt;一个比较初略未熟的想法：先重塑自己的肉体，再充实自己的大脑，。。。&lt;/p&gt;
&lt;h4 id=&quot;人体改造·第一阶段-2018-07-开始&quot;&gt;&lt;a href=&quot;#人体改造·第一阶段-2018-07-开始&quot; class=&quot;headerlink&quot; title=&quot;人体改造·第一阶段 2018.07 开始&quot;&gt;&lt;/a&gt;人体改造·第一阶段 2018.07 开始&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目标（Target）  &lt;code&gt;人体改造&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;量化（Quantification） &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每天饮水量 2333 ml&lt;/li&gt;
&lt;li&gt;每天步行数 10000 步&lt;/li&gt;
&lt;li&gt;工作日晚餐减量，配合吃 150g 鸡胸肉&lt;/li&gt;
&lt;li&gt;每周夜跑4-5次，每次4公里（第一阶段400公里）  &lt;/li&gt;
&lt;li&gt;睡眠时间段修正：1：00 ~ 8：00（±2） &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改进（Improvement）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暂无  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证（Evaluation）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段：跑步跑完 400 公里，体重降至 60 KG &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;每周零碎的记录&quot;&gt;&lt;a href=&quot;#每周零碎的记录&quot; class=&quot;headerlink&quot; title=&quot;每周零碎的记录&quot;&gt;&lt;/a&gt;每周零碎的记录&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;W1. 每天要喝2333ml量的水的这个目标还是挺难做到的; 今天状态不佳。また強くなりたくなったよ; 同学聚会归来。非常的嗨皮 ​​​​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;W2. 逐渐开始改变; 事情一件一件地搞定，逐个击破，排好顺序，不急不慌不乱; ​​​​今晚研究了一个项目管理的软件，在Win7下没搞定，在Linux下搞定了。。 ​​​​心神俱疲，洗洗睡了; 7月日均步行破万，奶思。喝水日均算下来也有1000了。睡眠时间带逐渐纠正中… 喝水目标好难达成啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;W3. 自我感觉脸色开始好起来了…改变很缓慢，但的确感觉到了…初期阶段宁愿慢一点，简单一点 ​。我的肉肉正以 0.1KG/天 的速度离开我 [拜拜] 先把人体炼成，其他的慢慢来。慢就是快 ​​​​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;W4. 今天魔都暴雨，导致了今天数据个方面不太漂亮。不过从周来看，目标平均达标的。而且已经第四周了，改变还不是很明显。除了更加迷之自信以外，每件事每个项目都在往前推进。眼下还是改造身体最为优先事项。下雨☔️台风天🌀休息♨️  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;W5. 最重要的事情只有一件。但生活教会我重要的事情不止一件，今年开始生活难度指数徒增数倍。チェーンの数多ければ多いほど、掟が厳しくなければ厳しいほどそのうち跳ね返ってくる力もまた強くなる。今は苦痛しか感じられないが決して、その日が来る為に必死に耐えてみせる ​​​​.现在的付出是为了2-3年后的收割，正如现在的我享受着2-3年的投资。 ​​​​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;夜跑记录&quot;&gt;&lt;a href=&quot;#夜跑记录&quot; class=&quot;headerlink&quot; title=&quot;夜跑记录&quot;&gt;&lt;/a&gt;夜跑记录&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/2018/07/1807RUN.m.jpg&quot; alt=&quot;第1-9次起跑&quot; title=&quot;第1-9次起跑&quot;&gt;&lt;img src=&quot;/images/2018/08/1808RUN.m.jpg&quot; alt=&quot;第10-18次起跑&quot; title=&quot;第10-18次起跑&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://jlyu.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>2017年回顾总结</title>
    <link href="https://jlyu.github.io/2017/12/12/2017-12-12-2017%E5%B9%B4%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
    <id>https://jlyu.github.io/2017/12/12/2017-12-12-2017年回顾总结/</id>
    <published>2017-12-11T16:00:00.000Z</published>
    <updated>2017-12-08T12:47:53.026Z</updated>
    
    <content type="html"><![CDATA[<p>待完成 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待完成 &lt;/p&gt;

      
    
    </summary>
    
      <category term="life" scheme="https://jlyu.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>403 Intermediate Swift</title>
    <link href="https://jlyu.github.io/2014/06/17/2014-06-17-intermediate-swift/"/>
    <id>https://jlyu.github.io/2014/06/17/2014-06-17-intermediate-swift/</id>
    <published>2014-06-16T20:22:00.000Z</published>
    <updated>2017-05-25T15:18:21.301Z</updated>
    
    <content type="html"><![CDATA[<p>此篇是WWCD 2014 Session 403 的学习笔记。主要涉及 Optionals、Memory Management、Initialization、Closure、Matching Pattern 这些主题。</p><a id="more"></a><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a><strong>Optionals</strong></h2><p>这个概念，肯定会在学习 Swift 过程中掉坑里。<br>使用 <code>Optional type</code> 是用来表示缺失值，主要为确保类型安全。声明 optional 变量时，在声明类型后加一个 <code>?</code> 可以把任意的 optional 想象成一个盒子，在未实际打开这个盒子之前，它总是存在两种情况：要么有东西，要么是空盒。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalNumber: <span class="type">Int</span>?  <span class="comment">// default initialized to nil</span></span><br><span class="line">optionalNumber = <span class="number">42</span></span><br></pre></td></tr></table></figure><p><code>Non-Optional Type</code> 顾名思义，那 Swift 中规定一个 Non-Optional can’t be nil ，也就是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalString: <span class="type">String</span> = <span class="literal">nil</span>  <span class="comment">// 会引发 compile error</span></span><br></pre></td></tr></table></figure><p><code>Unwrapped Optionals</code><br>! 是 ImplicitlyUnwrappedOptional\<t> 的语法糖，如果对 nil 进行 ! 操作，会得到 runtime error。 因此，在使用 ! 做 unwrap 操作时应抱着必死决心以得到原来实际的类型的值，也就是拿到 Optional 内部值。</t></p><p>Session 中有给出一个具体的例子，再回顾一次。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findIndexOfString</span><span class="params">(string: String, array: String[])</span></span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">for</span>(index, value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(array) &#123;</span><br><span class="line">        <span class="keyword">if</span> value == string &#123;</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// 因为将 Int? 作为 (Optional) Return Type， 这里可以使用 nil 返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> neighbors = [<span class="string">"Alex"</span>, <span class="string">"Ama"</span>, <span class="string">"Madsion"</span>, <span class="string">"Dave"</span>]</span><br><span class="line"><span class="keyword">let</span> index = findIndexOfString(<span class="string">"Madsion"</span>, neighbors)</span><br><span class="line"><span class="keyword">if</span> index &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"<span class="subst">\(neighbors[index!])</span>"</span>) <span class="comment">// 因为 index 是 Int? 这里必须 forced unwrap </span></span><br><span class="line">&#125;   <span class="comment">// 或 if let indexValue = index &#123; println("\(neighbors[indexValue])") &#125;</span></span><br></pre></td></tr></table></figure><p><code>Optional Binding</code>其定义是： test and unwrap at the same time，即 optional 配合 if let 一起使用，这样可以从逻辑上和可读性上更为简洁。上述的例子中，改写一下： if indexValue = index // 这个时候已经 unwrap 可以直接使用 index 的内部值了。</p><p>当需要多处链环 optional banding 的业务逻辑（if多层嵌套）时，引出 Optional Chaining 的概念。同一条链上东西，只要其中一环是 nil，那么整条链就会返回 nil ；对 nil 做 forced unwrap 则抛出 runtime error<br><code>Optional Chaining</code> 其定义：combine with optional binding to unwrap </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> addressNumber = paul.residence?.address?.buildingNumber?.toInt()</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">**<span class="type">Optional</span> 总结**</span><br><span class="line">使用 <span class="keyword">optional</span>(?) 是为了安全地处理 missing value。（为了兼容 <span class="type">ObjC</span>）  </span><br><span class="line">+ missing value 全是 <span class="literal">nil</span>  </span><br><span class="line">+ present value 被 wrap 在 <span class="keyword">optional</span> 内  </span><br><span class="line"></span><br><span class="line">unwrap(!) 一个 <span class="keyword">optional</span> 以访问其内部值</span><br><span class="line">+ 只有当你有确实的把握，才使用 ! 来 forced unwrap</span><br><span class="line">+ 使用 <span class="keyword">if</span> <span class="keyword">let</span> (<span class="keyword">optional</span> binding) 可同时测试和 unwrap </span><br><span class="line"></span><br><span class="line">当 <span class="keyword">optional</span> binding 嵌套太多时，使用 <span class="keyword">optional</span> chaining</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## **<span class="type">Memory</span> <span class="type">Management</span>**    </span><br><span class="line">使用 <span class="type">Automatic</span> <span class="type">Reference</span> <span class="type">Counting</span> 技术的确可以减轻开发者对内存管理的额外负担，但是由于引用的设置不当，形成 strong reference cycle 同样会存在 strong reference retain 的问题，从而造成 memory leak 。 <span class="type">Session</span> 从对象之间不同的关联角度应用不同的方法来解决这个问题。</span><br><span class="line"></span><br><span class="line">#### <span class="type">Ownership</span></span><br><span class="line">假设存在<span class="number">2</span>个类：<span class="type">Apartment</span> 和 <span class="type">Person</span>。两者之间存在相互关联关系，即 <span class="type">Person</span> 作为 <span class="type">Apartment</span> 的 tenant ；<span class="type">Apartment</span> 则作为 <span class="type">Person</span> 类中的 home。</span><br><span class="line"></span><br><span class="line">``` swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apartment</span> </span>&#123; <span class="keyword">var</span> tenant: <span class="type">Person</span>? &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> home: <span class="type">Apartment</span>? </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">moveIn</span> <span class="params">(apt: Apartment)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.home = apt</span><br><span class="line">        apt.tenant = <span class="keyword">self</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renters = [<span class="string">"Els"</span>: <span class="type">Person</span>()]</span><br><span class="line"><span class="keyword">var</span> apts = [<span class="number">507</span>: <span class="type">Apartment</span>()]</span><br><span class="line">renters[<span class="string">"Els"</span>]!.moveIn(apts[<span class="number">507</span>]!)</span><br></pre></td></tr></table></figure><p>在任意对象解除引用之后（renters = nil 和或 apts = nil ），被引用的 Person 和 Apartment 之间由于已形成 Strong Ref cycle，导致 Person 和 Apartment 的 2 个 instances 牢牢地相互绑定，谁也无法从中抽身。<br><img src="http://ww2.sinaimg.cn/large/aae020a8gw1ehg0123nr2j20nc069dgu.jpg" alt=""></p><p>为了打破僵局，引入 <code>Weak Reference</code> 的做法，定义：A weak reference is a reference that does not keep a strong hold on the instance it refers to, and so does not stop ARC from disposing of the referenced instance. 在声明成员变量的时，前置 <code>weak</code> 关键字。 且注意 <strong>所有的 weak ref 都是 optional value，因此无法声明成 let</strong><br><img src="http://ww1.sinaimg.cn/large/aae020a8gw1ehg012rb9rj20pu0d9dih.jpg" alt=""><br>一旦 deallocate 任意变量，renters = nil 后，即再没有 Ref 指向 Person ，所以 Person Instance 得以 deinit。 之后，如果 apts = nil，那么Apartment Instance 也被 deinit。</p><p>另外在方法调用过程中，也存在 Strong / Weak Ref</p><pre><code class="swift"><span class="keyword">if</span> <span class="keyword">let</span> tenant = apt.tenant {     tenant.buzzIn() <span class="comment">// BINDING the optional produces a Strong Ref</span>}等价于 apt.tenant?.buzzIn()</code></pre><pre><code class="swift"><span class="keyword">if</span> apt.tenant {    apt.tenant!.buzzIn() <span class="comment">// TESTING a Weak Ref alone does not produce a Strong Ref</span>}</code></pre><p>在调用链上不会保存 Strong Ref  </p><h4 id="Same-Lifetime-Relationships"><a href="#Same-Lifetime-Relationships" class="headerlink" title="Same-Lifetime Relationships"></a>Same-Lifetime Relationships</h4><p>上述的例子发生在两个(生命周期独立的)类中，对实例变量的 ownership 产生的 Strong Ref 的化解。接下来，看一下对有着相同生命周期的对象之间的引用关系。下面这个例子使用到 <code>Unowned Reference</code> 定义：an unowned reference does not keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is assumed to always have a value. 可见，unowned 和 Weak 相似，本质的区别在于 unowned ref 总是存在一个确定的值。<br><img src="http://ww3.sinaimg.cn/large/aae020a8gw1ehg0t5ydusj20ue0bhgps.jpg" alt=""><br>CreditCard.holder 必须存在一个确定的值，因此在此声明为 unowned 。 如果不这样做，当 customers = nil ，由于 Strong Ref Cycle 的作用，再次导致任意 instance 无法 deiniticalization。 声明成 unowned，customers = nil 之后， Person 的 instance 可以 deinit， 之后没有对 CreditCard 的 Strong Ref， 那么 CreditCard 的 instance 也可以 deinit。</p><p><strong>Strong、Weak、Unowned Reference 总结</strong><br><img src="http://ww3.sinaimg.cn/large/aae020a8gw1ehfyl2y6r1j20nc05vdgt.jpg" alt=""></p><ul><li>从 owner 方使用 Strong Ref 表明它们对 objects 的绝对拥有权。（被 Ref 的 Objects ，只要存在一根 Ref 关系线就不能 deinit）</li><li>在生命周期内相互独立的 Objects 之间，使用 Weak Ref。（Ref 线以虚线表示，实际上对 Objects 的 deinit 不造成影响）</li><li>当 owner 和 objects 有相同的生命周期，那么使用 unowned Ref。（与 weak 的区别还在于 object 必须有确定值）</li></ul><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a><strong>Initialization</strong></h2><p>Session 中强调数遍的简单规则：每个值在使用前 <strong>必须</strong> 被初始化。 如果某个值没有被初始化过(可能是逻辑覆盖不完整，同样会导致编译错误)</p><h4 id="Initializers"><a href="#Initializers" class="headerlink" title="Initializers"></a>Initializers</h4><p>负责一个 instance 的全部初始化工作， init()</p><h4 id="Structure-Initialization"><a href="#Structure-Initialization" class="headerlink" title="Structure Initialization"></a>Structure Initialization</h4><p>在 init() 内不能缺少对任何一个成员变量的初始化，必须全部覆盖到，这个做法同样是满足 Rule 的要求。如果存在类似 mutating func validateColor() {…} 的方法，不允许放在变量初始化前，因为会调用 self.validateColor() 而这时候的 self 尚未初始化完毕。如果 Struct 没有提供显式的 init(),在声明实例时 <strong>依照变量名的声明顺序</strong> 进行初始化赋值。</p><h4 id="Class-Initialization"><a href="#Class-Initialization" class="headerlink" title="Class Initialization"></a>Class Initialization</h4><p>这里有一个比较重要的概念是，Swift 总是初始化全部的成员变量之后，再调用 super.init() 这点跟 ObjC 的做法相反。</p><h4 id="Convenience-Initialiers"><a href="#Convenience-Initialiers" class="headerlink" title="Convenience Initialiers"></a>Convenience Initialiers</h4><p>前置 Convenience 关键字，可以为 class 声明不同的 init。在 init 内部需要手动调用 self.init(…) 来匹配对应的 init 版本。<br><img src="http://ww2.sinaimg.cn/large/aae020a8gw1ehg2k0ira5j20nc0c8q58.jpg" alt="">  </p><h4 id="Initializer-Inheritance"><a href="#Initializer-Inheritance" class="headerlink" title="Initializer Inheritance"></a>Initializer Inheritance</h4><p><img src="http://ww2.sinaimg.cn/large/aae020a8gw1ehg2vufhflj20nc07x0uc.jpg" alt=""></p><p><strong>Initialization 总结</strong><br>Rule: 在使用（某个实例）之前 <strong>必须</strong> 初始化所有的值。<br>首先设置所有的 Stored properties， 之后再调用 super.init 方法初始化父类<br>在实例消灭前存在析构方法 deinit ，你可以使用它干些 clean work，如果有必要的话..多数情况不用<br>Designated initializers only delegate UP （子类能对父类进行 <strong>纵向</strong> 的 init 操作： super.init）<br>Convenience initializers only delegate ACROSS (在同一个类中进行 <strong>横向</strong> 的 init 操作： self.init。convenince init 不能调用 super.init) </p><h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a><strong>Closures</strong></h2><p>Session 首先给出了一个字符串 sort 的具体例子，然后按特性一步步简化代码，并利用 Trailing Closures 演示 Functional Programming 的可能性。</p><pre><code class="swift"><span class="keyword">var</span> clients = [<span class="string">"Pestov"</span>, <span class="string">"Buenaventura"</span>, <span class="string">"Sceeram"</span>, <span class="string">"Babbage"</span>]cliens.<span class="built_in">sort</span>({(a:<span class="type">String</span>, b:<span class="type">String</span>)-&gt;<span class="type">Bool</span> <span class="keyword">in</span>    <span class="keyword">return</span> a &lt; b <span class="comment">// 可进行各类 Bool 判定，比如字符串长度</span>})</code></pre><p><code>Type Inference</code> struct Array\<t> { func sort(order: (T,T)-&gt;Bool) } 通过类型推导的特性，可以直接把参数的类型省略，clients.sort({a,b in return a &lt; b})<br><code>Implicit Returen</code>  clients.sort({a,b in a &lt; b})<br><code>Implicit Arguments</code> clients.sort({ $0 &lt; $1 })<br><code>Trailing Closures</code>  clients.sort { $0 &lt; $1 }<br><code>Functional Programming</code></t></p><pre><code class="swift"><span class="built_in">println</span>(<span class="string">"..."</span> + words.<span class="built_in">filter</span>{$<span class="number">0</span>.hasSuffix(<span class="string">"gry"</span>)}                     .<span class="built_in">map</span>{$<span class="number">0</span>.uppercaseString}                     .<span class="built_in">reduce</span>(<span class="string">"HULK"</span>){<span class="string">"<span class="subst">\($<span class="number">0</span>)</span> <span class="subst">\($<span class="number">1</span>)</span>"</span>} + <span class="string">"!!!"</span>)</code></pre><h4 id="Closures-同样会出现-Strong-Ref-问题"><a href="#Closures-同样会出现-Strong-Ref-问题" class="headerlink" title="Closures 同样会出现 Strong Ref 问题"></a>Closures 同样会出现 Strong Ref 问题</h4><p>原因是 Closure 全是 ARC Objects<br><img src="http://ww4.sinaimg.cn/large/aae020a8gw1ehgy4cjkmsj20tm0don0n.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇是WWCD 2014 Session 403 的学习笔记。主要涉及 Optionals、Memory Management、Initialization、Closure、Matching Pattern 这些主题。&lt;/p&gt;
    
    </summary>
    
      <category term="swift" scheme="https://jlyu.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>人生RPG·翻译出版</title>
    <link href="https://jlyu.github.io/2014/06/12/2014-06-12-%E4%BA%BA%E7%94%9FRPG%C2%B7%E7%BF%BB%E8%AF%91%E5%87%BA%E7%89%88/"/>
    <id>https://jlyu.github.io/2014/06/12/2014-06-12-人生RPG·翻译出版/</id>
    <published>2014-06-11T16:00:00.000Z</published>
    <updated>2017-05-25T15:18:34.469Z</updated>
    
    <content type="html"><![CDATA[<p>在过去的 2 个月里面，我把我个人的大部分时间都投到了翻译《HTTPの教科書》一书的事情上。而直至2个月之后的现在，我已经完成了该书初稿的翻译工作，并在今年的 4 月 25 日，后改名为《图解HTTP》并由人民邮电出版社负责出版发行。<br><img src="http://ww1.sinaimg.cn/bmiddle/6246eb61gw1ehbbgkwkazj20az07wmxv.jpg" alt="">  </p><a id="more"></a><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>某一天下午，我碰巧浏览到图灵社区的某个页面，在招募一本日文书的翻译，猜测内容主要是讲 HTTP 协议（因为仅有一张封面及内容简述）。在更早一段时间内我对 Web 应用开发产生兴趣（因为我有个明确的需求要去实现），所以有关 HTTP 知识也涉猎一并学习了。如今面对这样一本书，从语言及技术 2 方面来说，壁垒已经不存在，而且我比较确信的是如果我愿意接手这个项目，自然能手到擒来。</p><p>翻译完这一本书的价值远大于翻译这一本书的预期。  </p><ul><li>帮助我解开困扰我相当久的一个问题。</li><li>通过逐字逐句的翻译，对HTTP的理解更深刻。</li><li>翻译方法及流程的掌握。</li><li>规划项目并确保进度不失控。  </li><li>对国内图书出版流程的了解。</li></ul><h3 id="曾经有一段时间，我始终被一个问题困扰"><a href="#曾经有一段时间，我始终被一个问题困扰" class="headerlink" title="曾经有一段时间，我始终被一个问题困扰"></a>曾经有一段时间，我始终被一个问题困扰</h3><blockquote><p>我应该如何去理解别人？是否存在试图理解这回事？人与人之间的交往是否建立在相互理解的基础之上？如何才能做到真正地理解对方？</p></blockquote><p>在相当长的一段时间内，我是在寻求这样的答案。因为无法 100% 地站在对方的立场，不管怎么说我理解，“我能理解你”这句话都相当地缺乏说服力。如果能做得更好一些，就是实际去做和对方相似度很高的事情。比如，我有好几个当文学翻译的朋友，经常会听到对方对于翻译如何苦逼的抱怨，我也是安慰几句，一笑了之。我自己也做过一些类似笔译方面的工作，但和翻译一本书相比，工作量和时间跨度上相差了好几个数量级。所以现在，对方若要是再向我诉苦，我就可以说：恩，我能理解：）就是这样程度的一种理解。于是在这里，稍稍插入一个断言。即， <strong>如果想要理解一个人就尽量去做和对方相似度高的事情，去站在对方的立场，去体验。然后在自己心中默念：不要期望有人会理解你，永远假设没人懂你，但即使如此也没有关系。</strong> </p><h3 id="翻译方法及流程的掌握"><a href="#翻译方法及流程的掌握" class="headerlink" title="翻译方法及流程的掌握"></a>翻译方法及流程的掌握</h3><p>作为一名技术类图书翻译的新人，在次对翻译方法和流程试做一次回忆和总结。</p><h4 id="阅读原文"><a href="#阅读原文" class="headerlink" title="阅读原文"></a>阅读原文</h4><p>当时拿到的是 PDF 电子档（如果还有下次的话会选择让对方给我快递一本实体书或复印本）。浏览目录，明确整本书大致的讲授内容。然后认真地通读一遍原文。在阅读的过程中，肯定会遇到个别生词术语（如果有实体书的话就能够直接在上面做好标记）；如果遇到读下来模凌两可的语句也需要着重标记。通读完全文之后，对整个书的翻译难度自然会有一个全局性的把握，而之前标记出来的词句自然成为了路标，这时才正式下笔开始翻译。</p><h4 id="精译"><a href="#精译" class="headerlink" title="精译"></a>精译</h4><p>整本书的翻译工作都是在 Sublime Text + Makedown 插件下完成的。之前说语言和技术方面的壁垒已经破了，这只是大方向上的；而翻译是一字一句落实到细节的活儿。难免会遭遇各种各样的问题。</p><p> <strong>术语的统一</strong> 在翻译的过程中，我管理的一张中日英术语统一表贯穿始终。如果说在翻译英语技术书籍时需要从英语中映射到中文对应的说法，那翻译日语时则多了这样一个步骤。日语→英语→中文。原因是，曾经都是看老美的书，几乎没有看过日本IT方面的书，如果直接从日到中，在表述上肯定会存在问题的，而先往英语上靠一下再回过头来找对应的中文译名就方便许多，但同时也麻烦些。</p><p> <strong>语言表述问题</strong> 出版社方面的要求是：翻译要求忠实原文，翻译准确，语言通顺，不得有漏译现象。尽量不对原书进行改动的行为。而我对自己的要求是： <strong>要说人话</strong> 。再具体一些即是：尽量把长句切短，补足主语或宾语，不擅加个人理解上的改动或注释，忠实原文的同时无翻译腔，无语气词。为此我还特意买了几本最近才出版的日语技术类书籍，学习下别人是怎么做的。按我的理解，翻译并非是一项创造性质的工作，它完全是建立在原文基础上的改造，考验的是译者的改造技巧，如果能够以相当高明的技术改造并应付过去就是名合格的译者。如果译者具备相应的技术背景，那么在一些场景的翻译过程中就能够理解作者背后想传达的思想，如果仅仅直白地忠于原文也许会叫读者看得云里雾里。另一方面如果译者过于犀利，表达了超出作者范畴的理解也是不行的。所以对语言表述的难点在于，经译者的理解及处理后，能够让译文完整地传达作者的思想，还能够看起来相当地忠于原文。 </p><p> <strong>技术的严谨</strong> 在解决上述2个非技术问题之后，核心问题是传达的技术是否正确及严谨。比如有一个章节讲到了 Header ，然后我就直接找了 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html" target="_blank" rel="noopener">RFC 2616</a> 阅读了一遍。在翻译此书之前也看过几遍 <a href="http://book.douban.com/subject/10746113/" target="_blank" rel="noopener">《HTTP权威指南》</a> 。我必须保证看了此书的读者不会因为我的翻译被误导而学习了错误的概念，这样还不如不读，我的翻译也失去了价值，同时白底黑字的也势必会成为烙印及口实。</p><h4 id="校审"><a href="#校审" class="headerlink" title="校审"></a>校审</h4><p>在完成初稿后我首先自己阅读了一遍，因为从翻译者 → 阅读者身份的转变同时会带动关注视角的改变。因为在翻译时，绝大程度上的注意力是在词，句，段落是否与原文原意贴切，会不停地在原文与译文之间切换着看。在变为阅读者之后，就完全抛弃了原文，一口气读一章节的译文的过程中，就会发现……对，软软的流畅度。如果自己在阅读过程中有卡顿，或被迫停下理解之处，大部分都是翻译细节没有处理到位的情况。于是，就在每一个细节的地方对用词、或表述结构进行微调，直至满意为止。最后，我还请了我的几位好友（暂略）来帮忙校对及润稿，全程在 bitbucket 上 用 git 完成，他们在 Web 方面的经验远在我之上，我试图这样通过诸多手段才能保证翻译上不存在问题。在我把初稿交予负责编辑之后又和她以 word批注 + mail等方式经行了长达 4 个版本的修改，逐字逐句，细节到每个标点的正确使用。<br><img src="http://ww1.sinaimg.cn/bmiddle/6246eb61gw1ehbbglfyy5j20gk0arac8.jpg" alt=""></p><h3 id="规划项目并确保进度不失控"><a href="#规划项目并确保进度不失控" class="headerlink" title="规划项目并确保进度不失控"></a>规划项目并确保进度不失控</h3><p>全书约 307 页。如果以简单粗暴地按每天翻译3P来计算，就是102天约3个半月。老实说这个时间不算长，因为出版社会给与1-5个月的翻译周期。但是我无法接受，我手头上还有一些重要的 Project 等待我去完成（翻译只是一个意外的插曲）。于是，就变得再暴力一些，按每天 6P 的量来计算，51 天约 2 个月（最终我是花了 2 个月多 2 天的时间，比预计进度慢了 2 天整）。<br>翻译是一件比想象中更为吃力的事情。如果以我阅读此书的速度来看，1P 用个 30 秒就差不多了，但实际落到阅读-理解-查阅-咨询-输入-纠错，最终从日语假名转换成中文汉字，每 1P 都需要花费我 30 分钟甚至更长的时间。同时意味着我每天需要额外花费3 个小时的时间在这个项目中。现在重回这段的开头，规划已有，如何保证项目进度不失控？只要每天按照计划，按部就班地完成每日定量的作业即可保证。可最大的问题实际上在于无法 100% 保证每天能够完成这样的计划（这里并不是说计划本身的问题，而在于每天可能会出现的突发事件导致无法完成工作量的情况）。<br>针对可预见性的事态，我相应地调整了生活状态。比如：谢绝一切聚会，不出席邀约，砍掉了一次旅游计划，下班后直接回家，并保证周末最大限度宅在家中。晚上 21-23 点入睡，早上 4 点多起床。尽量减少娱乐性质的时间消耗（比如 1 话剧集我得分成3天看）只有保证翻译时间量上的投入，才能获得进度的平稳持续及高质量的翻译成果产出。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>从2013年9月18日到2014年6月的今天，总算可以抽时间做一次完整的回顾。从4月底发售至今，该书能够一举进入亚马逊、京东上的同类畅销榜（No.1~4 浮动）也属于对我初次翻译出版体验的良好回报吧。<br><img src="http://ww4.sinaimg.cn/bmiddle/6246eb61gw1ehbbspeg3dj20bd01lglt.jpg" alt="">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去的 2 个月里面，我把我个人的大部分时间都投到了翻译《HTTPの教科書》一书的事情上。而直至2个月之后的现在，我已经完成了该书初稿的翻译工作，并在今年的 4 月 25 日，后改名为《图解HTTP》并由人民邮电出版社负责出版发行。&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/bmiddle/6246eb61gw1ehbbgkwkazj20az07wmxv.jpg&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://jlyu.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>人生RPG·睡眠与早起</title>
    <link href="https://jlyu.github.io/2014/04/17/2014-04-17-%E4%BA%BA%E7%94%9FRPG%C2%B7%E7%9D%A1%E7%9C%A0%E5%92%8C%E6%97%A9%E8%B5%B7/"/>
    <id>https://jlyu.github.io/2014/04/17/2014-04-17-人生RPG·睡眠和早起/</id>
    <published>2014-04-16T16:00:00.000Z</published>
    <updated>2017-05-25T15:18:46.218Z</updated>
    
    <content type="html"><![CDATA[<p>读村上的<a href="http://book.douban.com/subject/10529295/" target="_blank" rel="noopener">长篇小说1Q84</a>，书中有这么一个观点： <strong>世界上最重要的事是能拥有一个干净·健康的身体。</strong> 这句话在脑海中挥之不去，也尚未找到可以反驳论据。身体素质乃底层建筑，其他一切的上层建筑都是建立在此基础之上。规律的睡眠，无形中占据着人生 1/3 比重的活动行为是生存的前提，且睡眠质量的好坏，会直接反映到第2天的白天活动。</p><a id="more"></a><p>####睡眠</p><p>每天是否能够抽出5-10分钟预留给自己静静地思考？如果每天只睡3-6个小时，并维持这种状态长达2-3个月的时间周期。通常来讲，再加上那么一点工作、生活的压力，当事人的生理机能的磨损就会显现出来，自控力↓ 注意力↓ 记忆力↓ 效率↓ 易激动发怒，特别在重要决策层面上容易犯错。倘若在没有出现值得为之燃烧生命，100% 投入的事件之前，保持充足·规律的睡眠时间 ，并设法提高睡眠质量是必要的。</p><p>最好只摄入纯水。人体缺水后主要影响血液，血液粘稠则不易携带充足的氧气至身体各处，而缺氧会让大脑昏沉，引发嗜睡。理论上入睡前6个小时不再摄入咖啡因，起床后的一杯咖啡倒是能够唤起整天的精神状态。床边放杯水，保证醒来就可以喝到，出门前喝完。</p><p>尽量每个早晨都保持在同一时刻起床。无论出现什么临时状况导致昨晚睡得有多晚，都准时起床。 <strong>以不打乱既定的生活节奏为上策。</strong> 不然就是在自残自己的睡眠系统，就好比每天在不同程度地倒时差。不规律的作息基本上难以形成规律的生物钟。即使是周末也不要赖床或想着通过补眠的手段来恢复精神状态。</p><p>但在工作、学习、复杂的人际关系等诱因的纠缠之下，很容易地不自觉陷入无法自我调节的沼泽之中。精神强压，焦虑等都会刺激脑神经，远离高质量的睡眠，甚至严重到失眠。失眠的人多数是在逃避责任，逃避 无聊的工作，长时间处于烦躁，焦虑，悔恨等负面情绪。</p><p>为什么不能早起？我觉得主要还是懒（起床的动力不足）。 <strong>有些时候你只能这样逼自己一把，对自己狠心。</strong></p><p>如果睡眠质量提高，那么在一定范围内减少睡眠时间是可行的，再把减少了的睡眠时间投入到其他喜欢的事情上，这也应该是很多人美好的愿望。</p><p>####早起<br>效果提升。无论早起还是晚睡，其目的就是为了提高效率，能够做更多的事。早晨1个小时≈白天1.5小时≈傍晚2小时≈晚上3小时。<br>精神层面。在通勤地铁中不会感觉昏昏欲睡，在早起后的身体开始分泌肾上腺素，会比急匆匆起床的状态好。能够有充足的时间吃一顿早餐。<br>自由时间。可以把早起后的这段时间自由地分配到各个方面：工作，学习，投资，体育，etc。 <strong>需要自己意识到自由的时间才是真正能够让自己变强的时刻。</strong>  </p><ul><li>信息收集。知道与不知道有天壤之别，云泥之差。一部分能够仅凭借信息不对称来牟利，而另一部分的人不知道。</li><li>考取证书。可以选择一些含金量高的证书挑战。这样不仅是对知识·技能的强化，又有可能从中获得收入的增加，前途的拓宽。</li><li>学习外语。外语的重要性就不在这边赘述了，学成之后可以留学或者去外企，从一个环境跳转到另一种环境，对人生会产生莫大的影响。</li><li>拓展人脉。可以挖掘一批志同道合的朋友，通过写作分享并扩大自身的影响力。</li><li>增进健康。散步，慢跑，健身房。总之去做任何运动，提高自身体质。</li></ul><p><img src="http://ww1.sinaimg.cn/bmiddle/6246eb61gw1efiklm8wndj20hs0hsabo.jpg" alt=""></p><p>欢迎关注 <a href="http://4dian.lofter.com" target="_blank" rel="noopener">早起俱乐部</a> 博客。我希望能够有朋友愿意分享自己的早起故事。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读村上的&lt;a href=&quot;http://book.douban.com/subject/10529295/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;长篇小说1Q84&lt;/a&gt;，书中有这么一个观点： &lt;strong&gt;世界上最重要的事是能拥有一个干净·健康的身体。&lt;/strong&gt; 这句话在脑海中挥之不去，也尚未找到可以反驳论据。身体素质乃底层建筑，其他一切的上层建筑都是建立在此基础之上。规律的睡眠，无形中占据着人生 1/3 比重的活动行为是生存的前提，且睡眠质量的好坏，会直接反映到第2天的白天活动。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://jlyu.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 学习笔记</title>
    <link href="https://jlyu.github.io/2014/03/10/2014-03-10-javascript-study-notes/"/>
    <id>https://jlyu.github.io/2014/03/10/2014-03-10-javascript-study-notes/</id>
    <published>2014-03-09T19:00:00.000Z</published>
    <updated>2017-05-25T15:18:52.875Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript</strong>是一种非类型的(?)，松类型，弱类型(?)，动态类型。脚本语言。 并基于原型的继承，是一种真正的OO语言。非惰性求值。语言不同分类间相互衍生的产物：同时是说明式和命令式，并同时具有函数式特性，命令式（基于原型的面向对象和过程）的特性弱类型，表明该语言在表达式运算中不强制校验运算元的数据类型，不表明语言是否具有类型系统。</p><a id="more"></a><p>1.赋值是一个运算，而不是一个语句。<br>2.赋值运算的本质：修改存储单元中的值<br>3.JavaScript 中只有一种方法来完成函数调用，即在函数后紧临函数调用运算符()<br>4.引用，在JavaScript中只是表示传递给函数的是对象或数组的引用（地址），而不是对象自身。但是在函数内部中改变的数值不会影响函数传入的参数本身。<br>5.JavaScript中字符串无法修改，通过传值来比较<br>6.var声明的变量是永久性的，用delete删除会引发错误<br>7.没有块级作用域。函数中声明的所有变量在整个函数体内都有定义。<br>8.将所有的变量声明在函数开头。<br>9.全局变量是全局对象的属性；局部变量是一个特殊的调用对象的属性<br>10.作用域链 （scope chain）  &lt;=事件冒泡?<br>查询某个变量的值时触发变量名解析（variable name resolution）<br>    顶层代码 scope chain=全局变量<br>    函数（不含嵌套） scope chain=调用对象+全局变量<br>    嵌套函数 scope chain=3+<br>11.使用了GC，垃圾收集机制<br>12.delete影响属性值，并不影响这些属性引用的对象。<br>13.void总是舍弃运算数的值然后返回undefined<br>14.switch匹配的case是用===完全等同运算符判定的，而不是用==相等运算符判定<br>15.函数function定义在解析时发生，而不是在运行时发生<br>16.with语句用于暂时修改作用域链 （速度慢，难优化）</p><p><strong>function</strong><br>了解 JavaScript Function 的一切了。Function 的本质是什么，什么是 closure，如何用 Function.prototype.apply 改变 this，为什么要改变 prototype 引用。如果这些问题有一个你搞不明白，你都写不出 Function.prototype.bind。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">      <span class="keyword">var</span> fn = <span class="keyword">this</span>, </span><br><span class="line">            args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>), </span><br><span class="line">            object = args.shift();  </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> fn.apply(object, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));  </span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>JavaScript 中只有一种方法来完成函数调用，即在函数后紧临函数调用运算符()<br><strong>匿名函数调用</strong><br>(function() {}());  // 返回调用结果<br>(function() {})();  // 返回函数自身<br>void function(){} (); // 调用函数并忽略返回值<br>永远不可能在JavaScript中通过修改参数来影响到函数外部的变量<br><strong>动态方法调用</strong><br>要将一个普通函数作为一个对象的方法调用，或者将A对象的方法作为B对象的方法调用，唯一要做的，也仅是改变一下this引用。<br>call 和 apply<br>     Area.prototype.doCalc = function( ) {<br>          calc_area.apply(this, arguments); //calc_area非Area方法<br>     }</p><p><strong>Scope</strong><br>没有块级作用域。函数中声明的所有变量在整个函数体内都有定义。<br>建议将所有的变量声明在函数开头。<br>全局变量是全局对象的属性；局部变量是一个特殊的调用对象的属性<br><strong>变量作用域</strong>：代码执行阶段对变量存储的理解。只有表达式，局部和全部3种作用域。生存周期只有2个：函数内的局部执行期间和函数外引擎的全局执行期间。将对象（类）的继承关系，与对象（类）的行为描述分离，只能依赖“变量作用域”来实现OO的封装特性<br><strong>语法作用域</strong>：语法分析阶段对代码块组织结构的理解。互不相交，可以存在平行或包含关系。高级别可以嵌套低级别的语法作用域，反之不成立；高级别的流程变更子句（或语句）可以跨越低级别的作用域：全局 &gt; 函数 &gt; 批语句 &gt; 语句 &gt; 表达式。</p><p><strong>Closure</strong><br>函数闭包：函数代码在运行过程中的一个动态环境。<br>对象闭包：with语句实现<br>闭包是运行期概念。<br>闭包是对应于运行期的函数实例的，而不是对应函数（代码块）的。<br>每一个函数实例都有一份<br>eval()<br>不同JavaScript引擎对eval()所使用的闭包环境的理解并不相同。<br>一般来说，eval()总是使用当前函数的闭包。<br>JavaScript的执行 动态执行 -&gt; 不能真实编译的，指编译成为二进制<br>     代码文本先被解释为语法树，然后按照语法树来执行的<br>     每次执行语法树中的一个函数（实例）时，会复制一个结构scriptObject。包含函数相关的形式参数，函数局部变量，upvalue，内层函数嵌套信息<br>     scriptObject动态关联到一个闭包，闭包与scriptObject具有不同的生存周期。<br>     按语法树执行函数中的代码，当访问变量时，先查scriptObject中的局部变量，最后查upvalue<br>函数在定义它的作用域内被执行，而不是在调用它的作用域里被执行。嵌套函数可以访问包含函数的所有参数和局部变量。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </span><br><span class="line">     <span class="comment">// code goes here.</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">uniqueID = ( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; id++; &#125;;</span><br><span class="line">&#125; )();</span><br></pre></td></tr></table></figure></p><p>理解变量作用域是理解闭包的第一步  </p><p><strong>arguments</strong><br>是一个类似数组的对象,并非真正的数组。<br>只是一个普通的js标识符，不是保留字。<br>一旦函数内有变量名为arguments则会隐藏对arguments对象的引用<br>作用：</p><pre><code>1. 检测是否使用了正确的参数个数2. 能写可变参数函数 </code></pre><p>arguments改变也会影响传入的参数<br><strong>arguments.callee</strong><br>属性可以让匿名函数递归调用自身<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (x&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> x * <span class="built_in">arguments</span>.callee(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>this</strong><br>this作为函数内部的一个对象。谁调用函数，this就指向调用者本身。<br>由于late-banding导致this的指向具有迷惑性。<br>任何用作方法（obj.func = method）的函数都被有效地传递了一个隐式的参数this；不允许为this赋值</p><p><strong>OO</strong><br>JavaScript不会有一个正式的类名字，它只是通过构造函数及其原型对象来近似地模拟类。<br>所有的函数都有一个prototype属性。js对象从它的原型继续属性。<br>使用原型对象可以显著减少每个对象所需的内存数量。<br>对象实例初始化：<br>     通过在构造器中利用this引用来初始化<br>     通过构造原型实例来初始化<br>     通过Object.create()并使用属性描述符的方式来构建对象并初始化<br>实例属性，是由构造函数创建和初始化的属性<br>每个实例方法由一个类的所有实例来共享。必须为属性显式指定 this 关键字<br>类属性，类的每个属性都只有一份拷贝。全局的。Rectangle.UNIT = new Rectangle(1,1);<br>类方法，通过类自身调用，非类的一个具体实例调用，不使用this。也是全局的。 Date.parse()<br>空对象 null 属于对象类型，对象是空值<br>空的对象 obj=new Object(); obj={ };<br>直接量 Literals（undefined, null, true/false, 数值，字符串，正则）的声明中不包含运算过程；<br>初始器 Initialiser 的声明中是可以包括运算过程的。<br>取一个不存在的属性的值不会导致异常，而是返回undefined<br>或者通过 if(typeof (obj.prop) != ‘undefined’) 来判断 （还是会存在obj.prop=’undefined’ 特例<br>或者通过 obj instanceof myobject<br>propertyIsEnumerable() 被标准强制实现成“只检测对象的非（自原型链继承而来的）继承属性”</p><p><strong>namespace</strong><br>新建一个空对象作为名称空间<br>var Class = {};<br>Class.define = …<br>一个模块不应该为全局名称空间添加多于一条的标记<br>使用个人域名作为名称空间 com.chaindomain.Class<br>var com;<br>if (!com) com={};<br>else if (typeof com != ‘object’)<br>     throw new Error(“com already exists and is not an object.”);<br>名称空间导入标记<br>var defineClass = com.chaindomain.define; //避免了冗长的模块名称<br>或在模块内部继续<br>var Class = {};<br>Class.define =  com.chaindomain.define;</p><p><strong>delete</strong><br>     不能delete var 声明的变量<br>     不能delete 直接继承自原型的成员。会恢复到prototype的值<br>     仅在删除一个不能删除的成员时，才会返回false<br>     delete book.chapter2 不仅置undefined和null,而且移除属性，in也不会检测到了。for..in..</p><h4 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h4><p>对象 {}<br>对象的另一种解释是：一个无序的属性集合。<br>通常用var来声明变量，但在声明对象的属性却不能使用。 book.title=”The Guide of JavaScripte”;<br>!== 和 != 的区别在于undefined 和 null</p><p>obj.property 和 obj[‘property’] 的区别<br>后者更灵活。for (var i=0; i &lt; 4; i++) { addr += obj[‘property’ + i]; } </p><p>constructor属性可确定一个对象的类型<br>d.constructor == Date 也可以写成 d instanceof Date<br>toString()       toLocaleString()<br>valueOf()<br>hasOwnProperty() 非继承的自有属性<br>propertyIsEnumerable() 非继承的自有属性，且此属性可以在for-in中被枚举<br>isPrototypeOf() 判断对象是否是参数的原型对象</p><p>数组 []<br>数组不过是一个有额外功能层的对象<br>创建数组</p><ol><li>var arr = [1,2,3];</li><li>var arr = new Array();</li><li>var arr = new Array(1,2,3);</li><li>var arr = new Array(10);<br>index 必须是0~2^32-1的整数，不然会变成生成对象的新属性<br>length 总是比数组最大元素的数大1<br>删除数组<br>Array.shift()<br>Array.pop()<br>Array.splice()<br>遍历数组<br>for (var i=0; i &lt; arr.length; i++) { … }  // 前提 arr 是连续数组<br>push() pop()<br>unshift() shift()</li></ol><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数最重要的特性是他们可以被定义和调用。<br>最后return可有可无。无，相当于return undefined<br>用 typeof 进行类型检测 a = a || []<br>arguments对象是一个类似数组的对象,并非真正的数组.只是一个普通的js标识符，不是保留字。一旦函数内有变量名为arguments则会隐藏对arguments对象的引用<br>作用：</p><pre><code>1. 检测是否使用了正确的参数个数2. 能写可变参数函数 </code></pre><p>arguments改变也会影响传入的参数<br>arguments.callee属性可以让匿名函数递归调用自身<br>function(x) {<br>     if (x&lt;=1) return 1;<br>     return x * arguments.callee(x-1);<br>}</p><p>如果一个函数参数过多，可以通过在函数外wrapper一层函数，然后传对象的方式传递<br>easycopy ({from:a, to:b, length:4});<br>任何用作方法（obj.func = method）的函数都被有效地传递了一个隐式的参数this；不允许为this赋值</p><p>prototype属性<br>引用的是预定义的原型对象。</p><p>call()   =&gt; f.call(o, 1,2);<br>apply() 与call() 相似，只是传递的参数由数组组成 f.apply(o, [1,2]);<br>第一个参数都是要调用的函数的对象</p><h4 id="构造函数和原型对象"><a href="#构造函数和原型对象" class="headerlink" title="构造函数和原型对象"></a>构造函数和原型对象</h4><p>自定义构造函数<br>function Rectangle(w,h) {<br>     this.width = w;<br>     this.height = h;</p><pre><code>this.area = function() { return this.width * this.height; }  // 这样效率很低 why? 因为每份实例都要定义自己的area方法呀。使用原型对象可以显著减少每个对象所需的内存数量。Rectange.prototype.area = function() { ... } </code></pre><p>}</p><p>所有的函数都有一个prototype属性。js对象从它的原型继续属性。<br>使用原型对象可以显著减少每个对象所需的内存数量。<br>在对象创建以后才添加到原型中的属性，对象也可以继承。<br>prototype属性是由一个类的所有对象共享的属性，prototype是理想的定义方法的工具；同样，常量也适用prototype</p><p>JavaScript不会有一个正式的类名字，它只是通过构造函数及其原型对象来近似地模拟类<br>实例属性，是由构造函数创建和初始化的属性<br>每个实例方法由一个类的所有实例来共享。必须为属性显式指定 this 关键字<br>类属性，类的每个属性都只有一份拷贝。全局的。Rectangle.UNIT = new Rectangle(1,1);<br>类方法，通过类自身调用，非类的一个具体实例调用，不使用this。也是全局的。 Date.parse()</p><p>比较方法 a.compareTo(b)<br>按地址比较对象，而不是按值.</p><p>超类和子类<br>显示调用超类的构造函数，叫做构造函数链</p><p>Rectangle.call(this, w, h); 可以简化成</p><p>PositionedRectangle.prototype.superClass = Rectangle;<br>this.Rectangle(w, h);<br>超类构造函数通过this对象被显式调用，就不再要使用call或apply。但要注意子类的子类情况。也就是说superclass属性只能在继承层次中用1次。</p><p>混入类 mixin class<br>只定义其他类可以借用的有用方法，除此以外什么也没做。</p><p>判定对象类型<br>typeof   注意：typeof null == typeof undefined == ‘object’<br>instanceof   o instanceof object || function 总是true<br>toString() 只对内建对象类型有效，那么 Object.prototype.toString.apply(o);</p><h4 id="名称空间和初始化"><a href="#名称空间和初始化" class="headerlink" title="名称空间和初始化"></a>名称空间和初始化</h4><p>新建一个空对象作为名称空间</p><p>var Class = {};<br>Class.define = …</p><p>一个模块不应该为全局名称空间添加多于一条的标记</p><p>那如果名称冲突的js文件，通过在不同子目录下的存放动作是否可以避免冲突了？<br>这也就是为何提成js模块化编程</p><p>使用个人域名作为名称空间 com.chaindomain.Class</p><p>var com;<br>if (!com) com={};<br>else if (typeof com != ‘object’)<br>     throw new Error(“com already exists and is not an object.”);</p><p>名称空间导入标记<br>var defineClass = com.chaindomain.define; //避免了冗长的模块名称<br>或<br>在模块内部继续<br>var Class = {};<br>Class.define =  com.chaindomain.define;</p><p>闭包定义私有空间<br>语法错误：<br>     语法分析通不过，整个脚本代码块都不执行。<br>     语法分析通过后，但在执行过程中出错，那么在同一代码上下文中，出错点后的代码将不再执行。</p><p>全局变量：在函数外声明的变量<br>局部变量：在函数或子函数内声明的变量。</p><p>通过 typeof 获得对象6种类型（first-class）之一：undefined, number, string, boolean ｜ function, object</p><p>显式声明：var<br>隐式声明：不用var </p><p>=== 如果不是同一个变量或其引用，则2个变量不相等，也不相同。</p><p>finally { … } 总是在try/catch块退出之前被执行，但“不一定”能被完整地执行（在finally里面又发生异常或者throw）</p><p>二义性</p><ul><li>如果表达式中存在字符串，则优先按字符串连接进行运算<br>（） 虚拟参数表<br> 传值参数表<br> 充当if, while和do…while语句中的词法元素时，（）会有”将表达式结果转换为布尔值”的副作用<br> 强制表达式运算<br>[ ]   可以理解为数组声明或下标存取<br> 可以理解为对象成员存取</li></ul><p>语法作用域：语法分析阶段对代码块组织结构的理解<br>互不相交，可以存在平行或包含关系。高级别可以嵌套低级别的语法作用域，反之不成立；高级别的流程变更子句（或语句）可以跨越低级别的作用域<br>全局 &gt; 函数 &gt; 批语句 &gt; 语句 &gt; 表达式</p><p>变量作用域：代码执行阶段对变量存储的理解。只有表达式，局部和全部3种作用域。生存周期只有2个：函数内的局部执行期间和函数外引擎的全局执行期间。</p><p>空对象 null 属于对象类型，对象是空值<br>空的对象 obj=new Object(); obj={ };<br>属性&lt;构造器&gt;.prototype指向原型。对象只有“构造自某个原型”的问题，并不存在“持有某个原型”的问题<br>原型也是对象实例</p><p>将对象（类）的继承关系，与对象（类）的行为描述分离<br>只能依赖“变量作用域”来实现OO的封装特性</p><p>函数式语言 （连续求值）<br>这里的函数，指的是：函数 == “lambda”<br>     +函数是运算元<br>     +函数内保存数据<br>               JavaScript中的函数作为参数时，也是传递引用的。但没有地址概念<br>               函数语言可以在函数内保存数据。在命令式语言中，函数内部的私有变量（局部变量）是不能被保存的<br>     +函数内的运算对函数外无副作用<br>               函数入口参数作为值参数，而不修改它<br>               在运算过程中不会修改函数外部其他数据的值（如全局函数）<br>               运算结束后通过函数返回向外部系统传值<br>永远不可能在JavaScript中通过修改参数来影响到函数外部的变量</p><p>包装类<br>在元数据经过“包装类”包装后得到的对象，与原来的元数据并不再是同一数据，只是二者的值相等而已。</p><h4 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h4><ul><li>蝴蝶书 《JavaScript: The Good Parts》  <a href="http://book.douban.com/subject/2994925/" target="_blank" rel="noopener">http://book.douban.com/subject/2994925/</a></li><li>犀牛书 《JavaScript权威指南》<a href="http://book.douban.com/subject/2228378/" target="_blank" rel="noopener">http://book.douban.com/subject/2228378/</a></li><li>《JavaScript Cookbook》<a href="http://book.douban.com/subject/4720800/" target="_blank" rel="noopener">http://book.douban.com/subject/4720800/</a></li><li>《JavaScript语言精髓与编程实践》<a href="http://book.douban.com/subject/10542576/" target="_blank" rel="noopener">http://book.douban.com/subject/10542576/</a></li><li>《Effective JavaScript》<a href="http://book.douban.com/subject/10494340/" target="_blank" rel="noopener">http://book.douban.com/subject/10494340/</a></li><li>《编写可维护的JavaScript》 <a href="http://book.douban.com/subject/21792530/" target="_blank" rel="noopener">http://book.douban.com/subject/21792530/</a></li><li>悟透JavaScript <a href="http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html" target="_blank" rel="noopener">http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html</a></li><li>JavaScript秘密花园 <a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></li><li>JavaScript 原理 <a href="http://typeof.net/s/jsmech/" target="_blank" rel="noopener">http://typeof.net/s/jsmech/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;是一种非类型的(?)，松类型，弱类型(?)，动态类型。脚本语言。 并基于原型的继承，是一种真正的OO语言。非惰性求值。语言不同分类间相互衍生的产物：同时是说明式和命令式，并同时具有函数式特性，命令式（基于原型的面向对象和过程）的特性弱类型，表明该语言在表达式运算中不强制校验运算元的数据类型，不表明语言是否具有类型系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生RPG·马拉松</title>
    <link href="https://jlyu.github.io/2013/12/23/2013-12-23-%E4%BA%BA%E7%94%9FRPG%C2%B7%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    <id>https://jlyu.github.io/2013/12/23/2013-12-23-人生RPG·马拉松/</id>
    <published>2013-12-22T16:00:00.000Z</published>
    <updated>2017-05-25T15:19:00.276Z</updated>
    
    <content type="html"><![CDATA[<p>我从今年2013年的6月1日起开始练习跑步。直到上周日12月1日完成上海半程马拉松的比赛，并突破了PB（成绩是21.1K@2H18S）  </p><a id="more"></a><p><img src="http://user-image.logdown.io/user/3348/blog/3391/post/165448/vkZ8cZFQLWFKKrf0JNM3_%E6%88%91%E8%B7%91%E6%98%AF%E5%9B%A0%E4%B8%BA______________%E3%80%82.jpg" alt="我跑是因为______________。.jpg"></p><p>作为一名程序员，可能会遭遇各种体能/体力上的瓶颈，久坐成病，身为同行，感同身受。而我不会放任自己的弱点视若无睹。<br>作为一名爱读村上春树作品的读者来说，跑步这项运动是在潜意识中慢慢长固的。直至我要多运动→那就去跑步吧，这样的条件反射形成。于是再也按捺不住，穿了跑鞋就跑了起来。第一次死很惨，都没办法完整跑完2K，第二天整个人还累成了狗。（侧面反映出我的体能是多么地差）</p><p>在第二次跑步之前就不断地查阅各种与跑步有关的方法论。可能人类真的会在专注于某件事后，不知不觉地把生活重心也随之转移过去。因此在收集资料的同时，对于跑步的赞美之词不绝于耳，通过跑步改善生活的示例也不胜枚举。所以讲了，如果真的能够在着手某件事之前 <a href="http://chain.logdown.com/post/154833-release-pressure-and-reduce-anxiety" target="_blank" rel="noopener">赋予合理性</a> ，就会做得比较好。</p><p>在第二次起跑前，我留了诸多的问题给自己：</p><ul><li>跑步的真正的触发动机？</li><li>如何科学地指定跑步计划？</li><li>需要购置哪些跑步装备？</li><li>如何避免跑步中受伤？</li><li>如何才能坚持让自己跑下去？</li><li>通过跑步要达成的目标是什么？</li><li>…</li></ul><p>类似上述的一堆问题，不过在此时我还没有 <a href="http://chain.logdown.com/post/157740-in-black-and-white" target="_blank" rel="noopener">真正地理解</a> 跑步这件事，也就不能一下子弄清这些疑问。有意思的是，在6个月后的今天，这些问题我已逐个击破，心中自有明解。</p><p><strong>一双适合自己的跑鞋</strong><br>跑步装备之中，最重要的就是跑鞋。它承载着你的所有体重再加上跑步时的冲击力，如果想尽可能跑得舒服，减少受伤，把钱投资在跑鞋上是不会错的。网络上提供 <a href="http://www.myprecisionfit.com/test/welcome" target="_blank" rel="noopener">足型的在线测试</a> 测试完成后最好再能去实体店实际试穿一下，而尺码可以考虑比平时买大0.5码。</p><p><strong>正确的跑姿及预防受伤</strong><br>经过我的观察，很多人的跑步姿势不太好。而一个 <a href="http://www.zhihu.com/question/20693323" target="_blank" rel="noopener">正确的跑姿</a> 可以避免在运动中受伤，帮助你节省更多的体力，最后还能让你自信地跑起来。了解点 <a href="http://v.youku.com/v_show/id_XNDg2ODgyODQ0.html" target="_blank" rel="noopener">如何预防脚踝受伤</a> 的知识也是必不可少的。</p><p><strong>坚持跑下去</strong><br>这点似乎有点困难。要说难在哪里？我想了下几个可能会成为难点的地方。</p><ol><li>跑步这项运动略单调乏味。因为可能会长时间（45~60分钟）内只有你一个人孤身在跑，如果跑步场地固定的话，那跑步时的风景也已经看过不知多少回了。（比如400米的操场，跑完10K则需要绕25圈，重复且单调）</li><li>下班回到家晚饭过后人其实已经处于一种相当倦怠的状态，如何控制自己再重新换上装备去跑步的难点。</li><li>天气的原因，或者一些意外事件的插入强制中断你的跑步计划。</li></ol><p>同样，我要总结下从跑步中得到的收获</p><ol><li><strong>体质</strong> 从最近的一次体检结果中显示我的体质处于整个人生的巅峰，虽然我已不再年轻，可我感觉我似乎比以前的自己强了。平日稳定心率保持在60~70，即使在冬天也可以穿很少。</li><li><strong>耐心</strong> 某一天心血来潮说：“我决定了，就下楼一口气跑个10K吧”然后发现怎么也做不到，体力的上限就那么多。第二次依然还是无法做到…但是跑着跑着突然的某一天却发现自己能跑下来了。于是朝着20K发起挑战，同样地惨败。又经过一段时间的训练，发现居然可以跑下20K了！然后朝着40K发起挑战…… 我的意思是，类似这样的体能（技能）绝非一朝一夕可以搞定的，但是如果能够耐着性子，只要有足够的耐心等待下去，就会在某个时间点豁然开朗的。但是在这个等待的过程中，你必须忍受大量重复枯燥的过程。15K以上时肉体上的疲劳和痛苦会暴露出来，精神上的单调和枯燥也会尝到。一般人很难坚持下来，但如果你能够坚持下来，忍受这份乏味，那么在处理其他事务上也可能胜人一筹。</li><li><strong>跑友</strong> 跑步固然是属于一个人孤独的运动，但是不妨碍跑友间的经验交流。这次我就是获得了不少的有效情报，能够在比赛中跑得游刃有余。</li><li><strong>奖牌证书及一次终身难忘的荣光体验</strong></li></ol><p><img src="http://user-image.logdown.io/user/3348/blog/3391/post/165448/XTsetPfZStaY82iWbwFi_2013%E4%B8%8A%E9%A9%AC%E5%AE%8C%E8%B5%9B%E7%BA%AA%E5%BF%B5%E3%80%82.jpg" alt="2013上马完赛纪念。.jpg"> <img src="http://user-image.logdown.io/user/3348/blog/3391/post/165448/BMFp4fiCR9SaLEUCWDY2_612619004604671968_53296880.jpg" alt="612619004604671968_53296880.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我从今年2013年的6月1日起开始练习跑步。直到上周日12月1日完成上海半程马拉松的比赛，并突破了PB（成绩是21.1K@2H18S）  &lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://jlyu.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Chain Chronicle</title>
    <link href="https://jlyu.github.io/2013/10/23/2013-10-23-cc/"/>
    <id>https://jlyu.github.io/2013/10/23/2013-10-23-cc/</id>
    <published>2013-10-23T03:20:00.000Z</published>
    <updated>2017-05-25T15:19:13.329Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客这件事情上，我总是表现得不够“坚持”。从最初开始写，统计到目前应该也写满 500 篇以上了。但是我会经常更换写作平台，可能有时候仅仅是因为一个吸引眼球的 feature。可是时间一久就会感觉那个功能，UI也就那样了，或许根本对我来说不是最重要的。于是，又踏上寻求其他写作平台的老路。今天下午向几位好友(av, eric, f, 农民工老板(?)..)问询是否有更适合我的写作平台，在那之前我也尝试提出了对我来说最为核心的需求。 </p><a id="more"></a><ul><li>访问统计（且细致到每篇文章的阅读次数）  </li><li>文章分类  </li><li>月份归档  </li><li>评论  </li></ul><p>他们向我推荐了很多，甚至鼓励我自己搭建环境，我实在是不想折腾了，最后定位到 logdown。用 Google Analytics 追踪访问量，用 Disqus 加载评论，分类和归档自带，所以说除了没有明显的访问量数字这点，其余的需求都一一被满足了。</p><p>写作这件事于我来讲应该是愉快的。因为它可以作为大脑思考后的沉淀，又可以作为思绪整理的工具。如果不真正地通过文字把内容记录下来，我不能妄言我理解了。从今年5月初开始到将近10月末，我没有一篇博客产出，曾近一度我失去了写作的力量……现在我要重新开始写。  </p><p>在重新开始写之前，我需要这个一个开始，而决定开始是最难的部分。  </p><p>####停滞不前的人生  </p><p>悬而未决是一个很痛苦的状态，可能做完决定后随之而来的结果会更令人痛苦，这是没有办法的事情。能够带有觉悟程度的决意把某件事情单方面决定了还是会在某个瞬间觉得自己还是可以的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写博客这件事情上，我总是表现得不够“坚持”。从最初开始写，统计到目前应该也写满 500 篇以上了。但是我会经常更换写作平台，可能有时候仅仅是因为一个吸引眼球的 feature。可是时间一久就会感觉那个功能，UI也就那样了，或许根本对我来说不是最重要的。于是，又踏上寻求其他写作平台的老路。今天下午向几位好友(av, eric, f, 农民工老板(?)..)问询是否有更适合我的写作平台，在那之前我也尝试提出了对我来说最为核心的需求。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>五月病的逆袭</title>
    <link href="https://jlyu.github.io/2013/05/20/2013-05-20-may-counter-attack/"/>
    <id>https://jlyu.github.io/2013/05/20/2013-05-20-may-counter-attack/</id>
    <published>2013-05-20T00:15:00.000Z</published>
    <updated>2017-05-25T15:19:21.915Z</updated>
    
    <content type="html"><![CDATA[<p>进入5月份之后，各项事情都没有“明显”本质上的进展，所以我也顺顺当当地得了五月病。  </p><p>直到受朋友所托，承担了一次高强度的私活之后，五月病才被我战翻，让我无论从生理上还是心理上的承受能力又提升了一个Level。虽然现在已经精疲力竭了，但还是想趁着各种细节尚未从思绪中溜走之际，把这次的事的整个经过都梳理一遍。  </p><a id="more"></a><p>托付的内容很简单：手动输入2100条日语书目的信息，在10天内完成。若能在4天内完成会有额外的bonus。(事实上最后5天完成。  </p><p>我的第一反应是找合适的ORC软件来简化整个工作量。前后找了好几个，国内的服务一般只提供中文(简体)+英文的识别。然后找到一个开源项目：Japanese ORC Project <a href="http://code.google.com/p/nhocr/" target="_blank" rel="noopener">http://code.google.com/p/nhocr/</a> 实际试用了一下，出来的结果很糟糕（识别率在1%以下，可能图源本身质量也不好）。好吧根本不能用，PASS掉。之后理所当然地又搜到一款软件：e.Typist v.14.0  体験版ダウンロード <a href="http://mediadrive.jp/products/et/index20.html" target="_blank" rel="noopener">http://mediadrive.jp/products/et/index20.html</a><br>然后安装NTLEA 0.86BETA  <a href="http://ishare.iask.sina.com.cn/f/6907146.html" target="_blank" rel="noopener">http://ishare.iask.sina.com.cn/f/6907146.html</a> 模拟日语操作环境防止字符出现乱码。可结果是依然不可用…   </p><p>没有办法，看来只能硬输入了。不过至此，我依然想“偷懒”。在开始一个项目之前，对项目的进度和强度进行一番预测还是很有必要的。我预计我输入一条书目花费的时间应该不超过2分钟，但就姑且算2分钟录入1条吧。那么理论上的速率是 30条/小时，也就是整个工作量在 70 小时。平均每天需要 17.5 小时。其实一开始我的直觉就告诉我 mission impossible 。然而我也不愿意把这个工作拖拉到10天，于是项目从一开始就被计划成分2步走。</p><ol><li>写程序简化格式部分的工作量。</li><li>外包一半的工作量。（我自认为我很靠谱，但我没有那么多时间，那只能花钱买时间了）</li></ol><p>通过观察发现每条书目可以把大致的信息抽成一张数据库表。类似 <code>编号|书名|作者|地点|出版社|年份|页数|中文译名|属于丛书|备注|标记</code> (除了编号，书名外其他值都可以为空) 于是在录入的过程中， 只需要关注录入的本质也就是不可减信息，从而最大程度忽略信息的格式。（事后证明，虽然一开始写程序(30分钟)+理解这样的录入格式(15分钟)这样的时间量，可一旦熟悉了这样的模式之后，每条信息录入可以节省20%的时间，从30→40条/小时）</p><p>即使做了以上的工作，从硬输入方面来讲，仍旧存在着2个难点：</p><ol><li>日本汉字的旧体 <code>藩 偕 瞥 厰 綴 輯 憲 慶 滬 胤 瀛 輿 叢 鍬 纂</code></li><li>大量偏僻的人名</li></ol><p>光从外包这个环节来说，我用软件工程的思想体验了一把PM的感觉。(作为一名程序员能够安心坐在那边写代码，从管理层的角度来看，实在是一件很幸福的事了。) 外包这事分为几个环节来讲：</p><h4 id="人员控制"><a href="#人员控制" class="headerlink" title="人员控制"></a>人员控制</h4><p>起初的设想是只招1-2个人来帮助我完成这件事情。如果仅有1-2个人的话其实也不用最后整得那么麻烦了。交付——验收——付款。轻松搞定不折腾心定120。但现实却不让你那么舒服舒服地，你必须花费一番心思才能得到你预想的结果。因为一开始我就预判错这件事的难易程度和枯燥程度了。我是从我自身出发考虑了这个问题，我干1000条，对方也干1000条，如果一个人干不了那么多，那么分2个人每人500条差不多了吧？但最后事实告诉我，500也还是多，最努力的人最终也只完成了300条。<br><strong>判断一件事的可行性程度应该从做事人的角度出发进行考量，而不是管理者拍脑袋就能做好决定的。更何况做事人本人都很难预估到一件事的完成周期和可行性呢(需要大量地在一个领域积累经验和案例?)</strong></p><h4 id="信息发布"><a href="#信息发布" class="headerlink" title="信息发布"></a>信息发布</h4><p>由一个好的切入口传达你的信息是一件很重要的事情。项目本来规模就不大，所以没有必要盲目地把信息散步到各大网站，这样只会造成入口的难以管理和筛选适任者的人力浪费（对于我来说为了完成这个项目，当前最宝贵的资源之一就是时间，我必须在限定的时间内完成）<br><strong>另外，发布信息内容的本身也很重要。文案很重要，嗯。但又不是写软文，即在很短的篇幅内简洁有力地向人说明，你想干什么，对方是否能干，干了有什么“收获”</strong> </p><h4 id="人员招募"><a href="#人员招募" class="headerlink" title="人员招募"></a>人员招募</h4><p>其次，并不是有人报名，并且声称自己符合相应的能力并为之表现出了很大的工作意愿，这样我就可以录用他了。Come on! Be real! 我需要先测试下对方的实际能力，但是我如果每来一个人我就要亲自向对方说明该如何如何做。这样会被浪费的时间就客观了，于是我直接写了一份简洁易懂的录入规范说明。这样每位被测试的候选人直接接受我的文件就可以去干活了。到时候交出测试成果，如果符合的话就采用，且会帮助对方修正理解上的误差；如果看几条偏的比较远的话就直接下一位了。 <strong>事实证明，找一个靠谱的人是多么重要，对方如果能力不及但是给混进来了的话…你就跟着吃屎吧</strong></p><h4 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h4><p>对于手下每一位被指派到任务的人，我通常都会关照他们在当晚下线之前主动想我汇报进度。对方都明确点头说OK。但事实是，仅有一半的人会这样做，另外一半的人只有我主动去发问才会告诉你。我利用软件跟踪了每个人的工作量，工作时间，完成进度和整体的项目进度等信息。从可视化地角度大大增加了项目被完成的可能性。同时，我觉得这可以应用在任何方面，一旦一个比较大，棘手的问题，通过分解，模块快，可视化能够大大提高一个人完成的主动性和可能性。 <strong>对于一名管理者来说，能够知道手下的工作进度是一件非常迫切的事情。作为下属有义务和责任主动向管理者汇报出现在工作上的问题，从管理者角度来说他们是更希望能更早地发现问题后一同解决，而不是隐藏错误，因为潜在的问题到最后可能是致命打击</strong></p><h4 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h4><p>项目中除了时间，最宝贵的资源就是人。但是人太不可控了，对人的控制从某个角度来说就是对风险的掌控能力。比如我招到的第一个人M，测试通过能力OK，进度方面确定也OK，可是刚干了第一天跟我说，喝酒喝醉了整个晚上没出活，第二天中午又突然跟我说老板派出差之后都没时间干了。得，你走吧。（不过幸好他还间接帮我介绍了另一位非常努力的人）第二个ID忘了(现在已经被我拉黑名单了)，测试勉强通过(因为我当时实在找不到人了，我想即使出现纰漏，我后期在替对方修改一下应该也勉强能用，但事实又一次证明了，宁缺毋滥)，然后我没每天询问对方进度，对方也总是23点左右上线说是开始工作了。好吧，你夜猫子就夜猫子吧，只要能够按时交货也就行了，等我第三天晚上……联系不到她了。后来通过QQ上面的微信联系好了，对方说在给朋友开生日Party，估计会通宵Happy，你的东西已经60%完成度了，我保证会在次日下午15点100%交出。我只能呵呵了，我的回复是最多延长deadline到次日早上10点，而且只结算目前做好的部分，如果超过1秒则合作破裂。其实当时我就应该直接砍掉这个家伙，谁叫我还是太心软了呢。 <strong>作为管理层人员，应该总是避免让自己和自己的团队处于危险和不可控的环境中，一旦发现有不安的诱因需要花时间去解决掉，且在紧急场合是有必要当机立断的及时止损。而这需要真诚的勇气和果敢的心</strong></p><h4 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h4><p>在接到这次任务之前已经做好了觉悟。必须牺牲其他的一切时间以此来交换使项目成功的可能性。在我当目标变得明确之后于是真的只在一个时间段内做这一件事了。</p><h4 id="情绪控制"><a href="#情绪控制" class="headerlink" title="情绪控制"></a>情绪控制</h4><p>其实人的心理在那几天内还是处于高强压状态的，其实有好几次我都想象到了项目的失败场景。因为东西太不可控了，不是说仅凭我一个人的努力和投入就可以搞定的。于是自然而然地会开始联想徒劳的失败。所以我仅可能地需要找到调节情绪和心理的润滑剂。如果我不能很好地控制住自己，项目必定失败。控制好自己才是一切的成功的前提，当我意识到这一点之后，我开始把绝望的因素统统丢掉了。</p><p>付出20%的管理成本，得到了50%的工作量减轻。项目最终得以按时顺利完成。</p><h4 id="实际收获"><a href="#实际收获" class="headerlink" title="实际收获"></a>实际收获</h4><ul><li>加深对日本汉字的训读的整体把握</li><li>顺带增加了几百个日语单词量</li><li>提升了输入速度和盲打的准确性 (到后期真的变60条/小时)</li><li>意志力，专注力和忍耐力的容量的提高</li><li>作为PM和别人的沟通技巧以及一些很细节可引导对方行为的方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进入5月份之后，各项事情都没有“明显”本质上的进展，所以我也顺顺当当地得了五月病。  &lt;/p&gt;
&lt;p&gt;直到受朋友所托，承担了一次高强度的私活之后，五月病才被我战翻，让我无论从生理上还是心理上的承受能力又提升了一个Level。虽然现在已经精疲力竭了，但还是想趁着各种细节尚未从思绪中溜走之际，把这次的事的整个经过都梳理一遍。  &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://jlyu.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>空间、信息、思考的整理</title>
    <link href="https://jlyu.github.io/2013/04/23/2013-04-23-spatial-thinking-information-collate/"/>
    <id>https://jlyu.github.io/2013/04/23/2013-04-23-spatial-thinking-information-collate/</id>
    <published>2013-04-23T00:14:00.000Z</published>
    <updated>2017-05-25T15:19:28.631Z</updated>
    
    <content type="html"><![CDATA[<p>要挖掘问题本质，就得找出“什么是最重要的事情”也就是必须设定优先排序。当前，是整理我的书房。</p><a id="more"></a><p>整理过程中，是自己对空间，以及取舍的把握。内心一定也是存在同样一个思考过程的。如果把充满各类书籍的书房比喻成森林，那此刻站在书房中心的我环视地面，书架，书桌，沙发上的书，犹如鸟瞰整片森林。终于有时间先让自己安静下来，慢慢地用眼睛扫过这一本本曾经与我共度美好时光的书们。过去买书的动机还是很盲目，比如看某些评分颇高就冲动购买了，还有就是网站搞半价打折活动时为了凑单胡乱把一些原不必要的书也加入了购物车。这样导致的结果是，本可以形成一片颜色相近的树林的地方被强行插入了几棵颜色风格迥异的独木。事后必然会为当时的冲动买单，我把原本简单，脉络清晰的风格变得相当复杂和扭曲。同时也增加了自己的阅读压力和时间。（大部分在时间的重压下会直接降低“任务”完成的质量）。</p><p>时隔1年半之后，我又重新整理书房。空间整理的目的，在于创造舒适的工作学习环境。杂乱的环境下，看似充满工作气氛，但其实不然(搞艺术的人或许需要这样)。因为视觉的作用，而人的精神极易受视觉左右，视野里的杂物一多，注意力不免涣散，专注力匮乏，久而久之容易染上恶习。试想在工作台上多台电脑，手机，书籍，杂物，这些东西其实都可令你的注意力在瞬间被转移。我们即使自以为可以同时做很多事，但终究只能一次做一件事。（因为大脑处理的过程类同单线程，即使看上去很够同时处理2件以上的事情，但也有可能是这人在切换上下文环境时所需花费的代价更小一点 罢了。有个实验是这样的：若要写完0-25和A-Z，1是先写完0-25再写A-Z，2是数字和字母交叉着写，结果相信不言而喻了）因此，彻底排除视野内的杂物，好让自己专注于单一事项。这也是很多注重工作效率的人士提倡GTD，TODO LIST，在进行电脑办公时关掉各种气泡提示，IM，Mail，社交网站等建议的原因。专注高效工作的训练相信也不会一蹴而就，必将成为自己和自己的长期的残酷战争。一方面主动自律，另一方面则是自己事先给自己准备舒适的工作环境。继续回到书房整理的事上来。</p><p>整理中的取舍充满着哲理。其中一条我想到的是：“书本身并没有价值。”如果引申远一点，除了书，各种有形的东西都是没有价值的，博主这个人本身也没有价值。如果一本书仅仅被我买下收进书架，它就(对我)没有价值。我存在这个世界上，不停地消耗有限资源，如果我不能创造出价值，我就(对整个社会)没有价值。书的价值一定是体现在被人阅读后的价值再创造上。过去1年中我仍旧很拘泥于做事的形式方法，在改变自己的想法后突然发现世界上存在的任何问题都不只有一种解决方案。也就是说，若本身既是以结果驱动的做事风格，那么又为何那么看中表象问题呢？… 如果书没有价值，那么它必然需要被“舍弃”。“舍弃”的勇气将雕琢你的价值观。亦是与“不安”的战斗。一旦确定哪些是多余之物，就大胆舍弃。“舍弃”是整理过程中不可或缺的手法之一。尽管困难，但只要跨越这道障碍，便能领悟到非常重要的技巧。若能消除不安，拥有舍弃的勇气，就跨出了一大步。</p><p>我们是否尚未认清问题本质就急于处理手头的问题？脑内世界和许许多多的世界共存，形成了庞杂的混沌状态。书和书之间其实也存在着类似的关联，如果书和书之间没有清晰的脉络和阅读路线，那么也容易形成一片黑暗森林。认清混沌现状，保持解决问题的心里准备，随时保持穷究问题本质的积极态度。搜索本质的重点是退一步观察。对书按类别分是较为理想的，但又不宜过度细分。按大类分主要是4类：</p><ul><li>语言</li><li>技术</li><li>心智</li><li>消遣  </li></ul><p>语言涵盖日语和英语，每门按基础教材来算大约是30本。之后是词典，最后是用于泛读的原著。正如我之前写的<a href="http://chainblog.diandian.com/how-to-learn-the-2nd-lang" target="_blank" rel="noopener">《个人对外语学习的迷思》</a> 中说的那样，语言更是接近本质的东西，因为自然语言相比编程语言来说，几乎在有生之年不会改变，没有新生繁荣衰败的变迁，更不存在过时一说，基本上算学好一门赚一门的不亏本买卖。所以这类书基本上会被沉淀下来。</p><p>技术是我目前的生存技能。但过时的技术书会被“舍弃”。所以选择一门技术方向上需要慎重，因为很有可能在今后1-2年是作为你的吃饭工具的。在这个方面的试错成本微大… 技术广博，容易成为八爪鱼，适合在创业公司做事。 </p><p>心智是开阔个人思维的钥匙。虽然我作为一门技术人员不会轻易说技术什么的不重要，因为我个人对技术能力高的大牛仍然是相当尊重的。但整个环境下来看，技术不会成为壁垒。除了技术能力，写作交流的能力我认为同样重要。如何把你内心的想法倾倒出来并让你的读者接受或反驳，如何把无形的想法整理，组织后成为有形的文字，这些同样是创造的过程。一个是用自然语言写成人类文字，另一个是编程语言写成计算机文字罢了。究其本质是相近的，同时行文的操控能力，对观点的阐述度，对叙述的逻辑顺序都是从一个更高的角度来看待这相近的2件事。语言(工具载体) — 技术(实现载体) — 写作(创造价值)。</p><p>消遣是浪费时间。但不浪费点时间会造成更大的浪费。</p><p>书目前就按着4个大类被划分了，而不属于其中任意分类的只能被舍弃。在考虑清楚之后，尽量突出自身优势并保持时刻学习心态的同时，可以按2年的跨度可以选择新的领域进行突破性学习。在注视着整理完毕后的书架，我自然满意。不料有一丝不安的阴影掠过了心尖。</p><p>因为在心智以及消遣类的书籍当中，随手抄起一本翻阅。我可以说我“几乎大部分”已经忘记了曾经以为记住的情节。 人的学习过程中的确是在跟自己的遗忘曲线斗争，但这类书不免输的太惨烈了。书页的折痕以及书上多处是被我用记号笔划过的痕迹，很多“深刻”的观点，很多“震撼”的论据，曾经都被条例清晰地罗列，但是现在不记得了。不记得不代表完全没有印象，如果重新翻阅第二遍就会很快回想起来。我意识到了这样一个问题，知识点的凌乱和缺乏全局性。书的数量此刻没有了意义，书的价值也无法体现。要解决这个问题，首先是要承认以下2点：</p><ol><li>遗忘曲线。</li><li>无数信息交错，论点的大相径庭。</li></ol><p>此刻我对于这种状态有了危机感，才是解决问题的第一步。考虑今后的改善方针：</p><ul><li>控制买书的数量。减轻阅读压力</li><li>一个时间段内强力研读一本书</li><li>阅读后的整理，知识脉络的归类，不然不为读</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要挖掘问题本质，就得找出“什么是最重要的事情”也就是必须设定优先排序。当前，是整理我的书房。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://jlyu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Practical Vim 学习笔记</title>
    <link href="https://jlyu.github.io/2013/04/10/2013-04-10-practical-vim-study-notes/"/>
    <id>https://jlyu.github.io/2013/04/10/2013-04-10-practical-vim-study-notes/</id>
    <published>2013-04-10T00:13:00.000Z</published>
    <updated>2017-05-25T15:19:35.642Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://www.zhihu.com/question/19691653" target="_blank" rel="noopener">Which one is your favorite commend</a>  </li><li><a href="https://raw.github.com/mattn/zencoding-vim/master/TUTORIAL" target="_blank" rel="noopener">ZenCoding TUTORIAL</a> <a href="https://zen-coding.googlecode.com/files/ZenCodingCheatSheet.pdf" target="_blank" rel="noopener">CheatSheet</a></li></ul><a id="more"></a><h4 id="vimrc-dotfile-Setting-sp"><a href="#vimrc-dotfile-Setting-sp" class="headerlink" title=".vimrc dotfile Setting sp"></a>.vimrc dotfile Setting sp</h4><pre><code>set matchtime=1let g:user_zen_expandabbr_key=&apos;&lt;C-y&gt;&apos;nnoremap &lt;silent&gt;&lt;C-l&gt;: &lt;C-u&gt;nohlsearch&lt;CR&gt;&lt;C-l&gt;</code></pre><p>\&lt;CR> =[enter]</p><p>####Tip1</p><pre><code> .     =repeat last change ( when over insert mode, the total edit contents are included&gt;G  =auto indent</code></pre><p>####Tip2</p><pre><code>A     =end of line insert$a    =the same effect above</code></pre><p>####Tip3</p><pre><code>s      =instead of a char;       =repeat last f{char} commend</code></pre><p>####Tip4</p><pre><code>@:     =repeat last EX commend</code></pre><p>####Tip5</p><pre><code>*       =search the word which cursor hover over </code></pre><p>####Tip8</p><pre><code>u    =undo last change&lt;C-r&gt;  =undo undo</code></pre><p>####Tip9</p><pre><code>daw   =delete word</code></pre><p>####Tip10</p><pre><code>cW   =modify a word (symbol will be a normal char)180&lt;C-x&gt;  ???</code></pre><p>####Tip11</p><pre><code>d2w = 2dw = dw. (but which one is the best?</code></pre><p>####Tip12</p><pre><code>dl     =delete a char =xdap  =delete an entire paragraphg~, gU, gu  =convert char&apos;s capital and small lettergUap  =convert entire paragraph into Upper-case lettergUgU=gUU  =convert current line into Upper-case letter=G    =auto indent</code></pre><p>####Tip13</p><pre><code>&lt;C-h&gt;   =delete back one char&lt;C-w&gt;   =delete back one word&lt;C-u&gt;   =delete back to start of line</code></pre><p>####Tip14</p><pre><code>&lt;C-[&gt;   =back to NORMAL mode =&lt;ESC&gt;zz        =redraw the screen with the current line in the middle of window</code></pre><p>####Tip15</p><pre><code>K         =looks up man page for the word under the cursoryt,       =yank the word befor , to {register}&lt;C-r&gt;0 =&lt;C-r&gt;{register}  = under INSERT mode, paste the register text&lt;C-r&gt;&lt;C-p&gt;{register}   =more smarter</code></pre><h4 id="Tip16"><a href="#Tip16" class="headerlink" title="Tip16"></a>Tip16</h4><pre><code>&lt;C-r&gt;={do math}&lt;CR&gt;  =do math for us under INSERT MODE</code></pre><h4 id="Tip17"><a href="#Tip17" class="headerlink" title="Tip17"></a>Tip17</h4><pre><code>ga   =inspect the code for the char under the cursor</code></pre><h4 id="Tip19"><a href="#Tip19" class="headerlink" title="Tip19"></a>Tip19</h4><pre><code>R   =engage REPLACE mode</code></pre><h4 id="Tip20"><a href="#Tip20" class="headerlink" title="Tip20"></a>Tip20</h4><pre><code>viw  =visually select word</code></pre><h4 id="Tip21"><a href="#Tip21" class="headerlink" title="Tip21"></a>Tip21</h4><pre><code>v         =into VISUAL modeV         =line-wise VISUAL mode&lt;C-v&gt;  =block-wise VISUAL modegv        =reselect the last VISUAL modeo          =(VISUAL) redefine the bounds of the selection</code></pre><h4 id="Tip22"><a href="#Tip22" class="headerlink" title="Tip22"></a>Tip22</h4><pre><code>2&gt;     =(VISUAL) indent twice</code></pre><h4 id="Tip23"><a href="#Tip23" class="headerlink" title="Tip23"></a>Tip23</h4><pre><code>vit    =select the inner contents of a tag (HTML) -&gt;cit,ditU      =(VISUAL) convert the selected char to upper-casegUit</code></pre><h4 id="Tip24"><a href="#Tip24" class="headerlink" title="Tip24"></a>Tip24</h4><pre><code>Vr-   =replace every chars in VISUAL line with -</code></pre><h4 id="Tip25"><a href="#Tip25" class="headerlink" title="Tip25"></a>Tip25</h4><pre><code>&lt;C-r&gt;3je   =quick VISUAL-block selectc               =[VISUAL] change one word</code></pre><h4 id="Tip26"><a href="#Tip26" class="headerlink" title="Tip26"></a>Tip26</h4><pre><code>&lt;C-v&gt;$A;[Esc]    =Append ; on the end of every selected line </code></pre><h4 id="Tip27"><a href="#Tip27" class="headerlink" title="Tip27"></a>Tip27</h4><pre><code>:$    =[EX] the end of the file:.     =[EX] the current line of the file:%   =[EX] all the lines in the current file</code></pre><h4 id="Tip28"><a href="#Tip28" class="headerlink" title="Tip28"></a>Tip28</h4><pre><code>:[range]copy|co|t{address}    =[EX] make a copy of line{range} put it blew the {address}:&apos;&lt;,&apos;&gt;    =[VISUAL] + [EX] &lt;C-r&gt;dGp   =select texture move to the end of the file</code></pre><h4 id="Tip29"><a href="#Tip29" class="headerlink" title="Tip29"></a>Tip29</h4><pre><code>:[range]m{address} =[EX] cut of lines{range} and put it blew the {address}Vjj :&apos;&lt;,&apos;&gt;m$   =move selected lines to the end of the file</code></pre><h4 id="Tip30-gt-67-69"><a href="#Tip30-gt-67-69" class="headerlink" title="Tip30 (=&gt;67,69)"></a>Tip30 (=&gt;67,69)</h4><pre><code>VG   =from current line to the end of file make VISUAL select:&apos;&lt;,&apos;&gt;normal.  =for each line in the VISUAL selection, and execute . commend:9,13normal A;    =with end of the 9th~13rd line append to ;:9,13normal i//    =the 9~13lines become comments</code></pre><h4 id="Tip31"><a href="#Tip31" class="headerlink" title="Tip31"></a>Tip31</h4><pre><code>:bn[ext]     =step forward through the buff list:bp[revious]    =backward</code></pre><h4 id="Tip32"><a href="#Tip32" class="headerlink" title="Tip32"></a>Tip32</h4><pre><code>:&lt;C-d&gt;    =[EX] ask vim reveal a list of possible completation</code></pre><h4 id="Tip33-gt-76"><a href="#Tip33-gt-76" class="headerlink" title="Tip33 (=&gt;76)"></a>Tip33 (=&gt;76)</h4><pre><code>:%s//&lt;C-r&gt;&lt;C-w&gt;/g  =[EX] &lt;C-r&gt;&lt;C-w&gt; equal mapping copies the word under the cursor</code></pre><h4 id="Tip34-gt-85"><a href="#Tip34-gt-85" class="headerlink" title="Tip34 (=&gt;85)"></a>Tip34 (=&gt;85)</h4><pre><code>q:    =open the command-line window with history of EX commandq/    =open the command-line window with history of searches</code></pre><h4 id="Tip35-gt-44"><a href="#Tip35-gt-44" class="headerlink" title="Tip35 (=&gt;44)"></a>Tip35 (=&gt;44)</h4><pre><code>:!{cmd}    =excute {cmd} with the shell:shell       =start a shell:read !{cmd}    =excute {cmd} in the shell and insert its standard output below the cursor:[range]write !{cmd}   = ... with [range] lines as standard input</code></pre><h4 id="Tip36"><a href="#Tip36" class="headerlink" title="Tip36"></a>Tip36</h4><pre><code>:ls    =give us a listing of all the buffers&lt;C-^&gt;  =quick toggle between the current and alternate files:bf :bl  =jump to the start or end of the list:bd      =delete a buffer</code></pre><h4 id="Tip37"><a href="#Tip37" class="headerlink" title="Tip37"></a>Tip37</h4><pre><code>:args    =open argument list</code></pre><h4 id="Tip38"><a href="#Tip38" class="headerlink" title="Tip38"></a>Tip38</h4><pre><code>&lt;C-w&gt;v | :sp {file}      =split the window vertically&lt;C-w&gt;s | :vsp {file}    =divide the window horizontally&lt;C-w&gt;w                      =cycle between open windows&lt;C-w&gt;hjkl                   =switch to activate window&lt;C-w&gt;o | :on              =keep only the active window</code></pre><h4 id="Tip40"><a href="#Tip40" class="headerlink" title="Tip40"></a>Tip40</h4><pre><code>:lcd {path}    =set the working dictory locally for the current window (not tab page):windo lcd {path}    = ...all windows:tabe {file}    =open a new tab page:{N}gt            =switch to tab page number {N}:gt                 =switch to the next tab page:gT                =switch to the previous tab page:tabm {N}     =rearrage tab page Number</code></pre><h4 id="Tip44"><a href="#Tip44" class="headerlink" title="Tip44"></a>Tip44</h4><pre><code>:!mkdir -p %:h    =create nonexistent directories</code></pre><h4 id="Tip47"><a href="#Tip47" class="headerlink" title="Tip47"></a>Tip47</h4><pre><code>w    =prev cu[r]rent [n]extb    =prev [c]u[r]rent nexte    =prev cu[r]ren[t] nextge  =pre[v] cu[r]rent next</code></pre><h4 id="Tip48"><a href="#Tip48" class="headerlink" title="Tip48"></a>Tip48</h4><pre><code>ea    =append at the end of the current wordgea   =append at the end of the previous word</code></pre><h4 id="Tip49"><a href="#Tip49" class="headerlink" title="Tip49"></a>Tip49</h4><pre><code>f|F|t|T{char};,    =find the {char} and move to it</code></pre><h4 id="Tip50"><a href="#Tip50" class="headerlink" title="Tip50"></a>Tip50</h4><pre><code>d/ge&lt;CR&gt;    =tell the d{motion} command what to delete</code></pre><h4 id="Tip52"><a href="#Tip52" class="headerlink" title="Tip52"></a>Tip52</h4><pre><code>ciw     =delete the word without trimming any whitespace</code></pre><h4 id="Tip53"><a href="#Tip53" class="headerlink" title="Tip53"></a>Tip53</h4><pre><code>``    =position before the last jump within current file</code></pre><h4 id="Tip54"><a href="#Tip54" class="headerlink" title="Tip54"></a>Tip54</h4><pre><code>%    =jump between opening and closing sets of parenthese</code></pre><h4 id="Tip55"><a href="#Tip55" class="headerlink" title="Tip55"></a>Tip55</h4><pre><code>&lt;C-o&gt;    =the back button&lt;C-i&gt;    =the forward button:jumps    =inspect the contents of the jump list(              =jump to start of previous sentence{             =jump to start of previous paragraphgf           =jump to the filename under cursor&lt;C-]&gt;     =jump to definition of keyword under the cursor</code></pre><h4 id="Tip56"><a href="#Tip56" class="headerlink" title="Tip56"></a>Tip56</h4><pre><code>:changes    =call the change list</code></pre><h4 id="Tip57"><a href="#Tip57" class="headerlink" title="Tip57"></a>Tip57</h4><pre><code>:set path?gf | &lt;C-]&gt;    =commands provide wormholes that transport us from one part of our codebase to another</code></pre><h4 id="Tip58"><a href="#Tip58" class="headerlink" title="Tip58"></a>Tip58</h4><pre><code>m{letter}    =create a mark at the current cursor position (L-&gt;local buff; U-&gt;Global marks)`{letter}     =back to mark:marks       =open marks&apos; list</code></pre><h4 id="Tip59"><a href="#Tip59" class="headerlink" title="Tip59"></a>Tip59</h4><pre><code>xp    =transport the next two charddp    =transport the order of this line and its successorP        =paste the contents of our unnamed register in front of the cursor</code></pre><h4 id="Tip60"><a href="#Tip60" class="headerlink" title="Tip60"></a>Tip60</h4><pre><code>:reg    =open registers&apos; list&quot;{register}    =call register&quot;_d{motion}&quot;+ | &quot;*    =X11 clipboard, used with cut, co, and paste&quot;% &quot;# &quot;. &quot;: &quot;/</code></pre><h4 id="Tip61"><a href="#Tip61" class="headerlink" title="Tip61"></a>Tip61</h4><pre><code>gvp     =switch the paste content in VISUAL mode</code></pre><h4 id="Tip62"><a href="#Tip62" class="headerlink" title="Tip62"></a>Tip62</h4><pre><code>yiwciw&lt;C-r&gt;0&lt;Esc&gt;   =some sequence of action make copy and paste</code></pre><h4 id="Tip63"><a href="#Tip63" class="headerlink" title="Tip63"></a>Tip63</h4><pre><code>q{ register }    =start record a sequence of changes@{ register }   =execute the contents of register</code></pre><h4 id="Tip66"><a href="#Tip66" class="headerlink" title="Tip66"></a>Tip66</h4><pre><code>qq;.q22@q</code></pre><h4 id="Tip67"><a href="#Tip67" class="headerlink" title="Tip67"></a>Tip67</h4><pre><code>:&apos;&lt;,&apos;&gt;normal @a    =tell vim to execute the MACRO once for each line in the selection</code></pre><h4 id="Tip68"><a href="#Tip68" class="headerlink" title="Tip68"></a>Tip68</h4><pre><code>qA    =append commands to the existing contents of register a</code></pre><h4 id="Tip70"><a href="#Tip70" class="headerlink" title="Tip70"></a>Tip70</h4><pre><code>:let i=1    =create a variableqaI&lt;C-r&gt;=&lt;CR&gt;)&lt;Esc&gt; :let i+=1 q:&apos;&lt;,&apos;&gt;normal @a</code></pre><h4 id="Tip71"><a href="#Tip71" class="headerlink" title="Tip71"></a>Tip71</h4><pre><code>:put a    =paste the contents of register</code></pre><h4 id="Tip83"><a href="#Tip83" class="headerlink" title="Tip83"></a>Tip83</h4><pre><code>/lang/e&lt;CR&gt;</code></pre><h4 id="Tip88"><a href="#Tip88" class="headerlink" title="Tip88"></a>Tip88</h4><pre><code>:s/going/rolling:s/going/rolling/g:%s/going/rolling/g</code></pre><h4 id="Tip93"><a href="#Tip93" class="headerlink" title="Tip93"></a>Tip93</h4><pre><code>/\v^([^,]*),([^,]*),([^,]*)$:%s//\3,\2,\1</code></pre><h4 id="Tip99"><a href="#Tip99" class="headerlink" title="Tip99"></a>Tip99</h4><pre><code>:g/TODO/t$</code></pre><h4 id="Tip100"><a href="#Tip100" class="headerlink" title="Tip100"></a>Tip100</h4><pre><code>:&apos;&lt;,&apos;&gt;sort</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19691653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Which one is your favorite commend&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.github.com/mattn/zencoding-vim/master/TUTORIAL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZenCoding TUTORIAL&lt;/a&gt; &lt;a href=&quot;https://zen-coding.googlecode.com/files/ZenCodingCheatSheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CheatSheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人对外语学习的迷思</title>
    <link href="https://jlyu.github.io/2013/04/07/2013-04-07-personal-myth-of-foreign-language-learning/"/>
    <id>https://jlyu.github.io/2013/04/07/2013-04-07-personal-myth-of-foreign-language-learning/</id>
    <published>2013-04-07T00:12:00.000Z</published>
    <updated>2017-05-25T15:19:59.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="掌握外语的好处"><a href="#掌握外语的好处" class="headerlink" title="掌握外语的好处"></a>掌握外语的好处</h2><ul><li>日语  可进日企；看懂ACG；兼职笔译口译赚外快；100%享受到旅游乐趣；增加生活情趣</li><li>英语  可进欧美企业；通过考研；看懂“新鲜的”技术文档；提升个人竞争力</li></ul><p>掌握好一门外语，无疑是充满诱惑的。但掌握好一门外语，需要你在背后付出上千小时的努力(至少我还没见过语言有速成的，最快起码需要1年时间，而且1年出来的语言能力还不全面)。但是从另外一个方面来说，一旦你掌握了一门外语，对方想要从零超越你，那他起码也得花费上千个小时(也就是2年左右的时间)。我们真的花费了太多的时间在语言学习上面了，是否因此错过更多美丽的风景，个中付出是否值得，只有过来人才能体会。</p><a id="more"></a><h2 id="个人总结的外语学习顺序"><a href="#个人总结的外语学习顺序" class="headerlink" title="个人总结的外语学习顺序"></a>个人总结的外语学习顺序</h2><ol><li><strong>字母|假名|拼音</strong>  基础中基础，训练到可以条件反射后进入下一步  </li><li><strong>单词</strong>                   基础，单词量多少直接影响到个人表达丰富度的深广度。一般来说能够应付日常生活需要10k左右。要达到“掌握了”这门语言并可以担任一些翻译工作则需要25k或更多。  </li><li><strong>短语|固定搭配</strong>   组成句子的基础，有一些必须刻意记忆和积累。  </li><li><strong>语法</strong>                   曾经我认为在英语学习中语法在语言中其实并“不重要”，现在回过头来看，不论是中文还是日语的学习过程中，都深刻地理解并学习了语法，而在以后的语言熟练过程中则“忘记了”语法，感觉从未存在过语法一样。      </li><li><strong>简单句</strong>                在完成了上述步骤之后就可以组成句子了。一开始不必追求充满华丽修饰的定语构成的复杂句，简单句即可。但通常以一句简单句配合1~3个语法点为佳。</li><li><strong>听&amp;阅</strong>                 在感觉语言已入门之后就可开始同时着手这2方面的学习训练了。都是需要颇为大的输入量才行。 （200部日/美剧，外加50本原著小说为基准）</li><li><strong>发音</strong>                   前期的音标/假名训练可以把某个音节念准确，可是把某个单词放入句子中则仍有可能会无法准确地把握节奏和语调。我现在仍旧认为发音在后期是可以被纠正的，通过大量的模仿练习之后。  </li><li><strong>自言自语</strong>            其实学到这里应该写成“交流”。但如果缺乏语言交流的环境，自言自语不失为一种非常理想的口语表达练习，尝试把内心想着的句子脱口说出来。如果每次说出来的句子中含有语法点，比较偏僻的单词则为好的建立回忆反射的训练。  </li><li><strong>翻译</strong>                   到这个环节，想必在这门语言上已经开始步入中高级了。尝试着手听译或笔译是一种在母语和外语之间双向切换的刻意训练。</li><li><strong>交流</strong>                  到此是作为学习语言的最终目的：与人交流或者应用。可能交流时仍需要克服一定的心理障碍，其实能力上已经满足日常的交流了。  </li></ol><p>一门语言学习过程可能会耗时2,000个小时以上，如果要达到翻译大师级别可能更是需要10,000小时，还蛮符合二八法则的。语言学习必须系统化的一鼓作气，拿出一年的娱乐时间，每天两小时，彻底将这门语言学好，从此不再需要“学这门语言”，终身受益。（我学日语那会儿每天8个小时，1年半学完以上1-9个环节；现在重拾英语，但每天各种各样的事情很难拿出固定的时间来学习，这样又导致了学习周期长，效率低，丢了捡，捡了丢，一直未能真正地“学会”）</p><h4 id="input理论"><a href="#input理论" class="headerlink" title="input理论"></a>input理论</h4><p>input= 学习时间 <em> (教材)质量 </em> 专注度。 假设需要的学习总时间是2000小时，那每天“持续”拿出3个小时，差不多2年可以学成。  如果能<code>坚持</code>下来的话…</p><h4 id="i-1理论"><a href="#i-1理论" class="headerlink" title="i+1理论"></a>i+1理论</h4><p>i即是你当前的能力，i+1代表比你的能力高出1点点难度。所以每次push自己学习i+1难度的东西才有可能迫使自己不断地朝前迈进。而自己要辨识出何为i+1难度，其实在自学过程中不是个简单的任务。如果按照学校或导师的指导进度那还会比较可控，而且这些也是他们存在的几个理由之一。作为独学者，一条比较可行的方法就是选择一套“好的”学习教材，踏踏实实从头学习下来。因为教材在编排上面已经考虑到以上问题呈i+1了。但当教材学习完毕之后或遭遇瓶颈期的时，如何再次突破i+1迷局呢?</p><h4 id="情绪控制理论"><a href="#情绪控制理论" class="headerlink" title="情绪控制理论"></a>情绪控制理论</h4><p>说的是学习的材料和环境应该是有趣的，轻松自如的，才能实现效果的最大化。情绪控制还可以应用在突破自身瓶颈状态。如果把一门语言硬是划分几个层次：初级—中级—高级—达人。每一级别背后都对应代表了其能力，比如中级需要掌握多少词汇量，多少语法点，可以读/听懂多少程度的内容之类。而一旦要从中级→高级，可能背后是需要成倍能力的对应。依旧拿日语为例：4级（800个单词，90个语法点）；3级（1700个单词，190个语法点）；2级（6000单词，380个语法点）；1级（10000以上单词，590个语法点）。的确要求翻倍了，于是升级会存在一定敬畏的心理，也容易令人在用线性思维计算后怯步。所以说，在突破瓶颈升级时需要调节控制自己的情绪。一旦你在某天获得了一个契机，一种升级的信心，那么就会很容易爬上去。反之，则会在某个级别上徘徊相当久的时间。同时，我认为这里这道分水岭就是划分高手和普通学习者的。</p><h4 id="也谈坚持"><a href="#也谈坚持" class="headerlink" title="也谈坚持"></a>也谈坚持</h4><ol><li><strong>明确且强烈的目标动机驱动</strong>  比如你要学会这门外语，最大的动机在哪里？ 换工作，提升个人竞争力，多看一个世界，把外国妹子etc。如果动机尚不明确，那我也不清楚能够坚持下去的动力从何而来。</li><li><strong>有个人专注的私人空间</strong> 有些事不需要更多的人参与，一个人默默地做就行了。还好我所选择的方向和技能都是可以一个人搞定的。这2年我身上背负着一个光环“扇贝网坚持连续打卡天数最长”。当然在成为所谓的网络红人或其他什么之前，我得赶紧自己拔出来。比如，我写过这篇文章<a href="http://chainblog.diandian.com/the-10000th-day" title="《我存在的第10,000天》" target="_blank" rel="noopener">《我存在的第10,000天》</a> 在开头我就这样写道：在新年伊始，我写了一篇新年愿景，没有列下很具体的目标。但有2个主题：Communication &amp; Disappearance。 其实我依然在怀疑SNS网站存在的必要性，看似喧嚣热闹的背后其实把我们变成了一座座孤岛。 貌似走题了，我从今年1月初就没有在<a href="http://www.douban.com/people/chain233/" title="我的豆瓣" target="_blank" rel="noopener">我的豆瓣</a>上更新过一条广播，在各大微博上面我也是尽可能地保持最小可容忍范围内的收听人数。究其原因，其实不为别的，只是没有必要，上面能够流出来的信息都不要是第几手的了，大家都不厌其烦地说着重复的话，做着重复的事情，我觉得没意思，但同时我又懒得再拨时间去挖掘有意思的人了。更进一步说，我甚至怀疑网络上提供所谓的各种服务。我们都说网络在把我们生活变得更美好的同时，打散了我们的注意力，把我们的时间碎片化了。（想当年我自学日语那1年半时间内是没有网络的）但是作为职业，我又不能不使用网络，作为需要联系的人我不能不使用网络，所以这里面存在的矛盾关系需要我自己去调节。于是，就降低关注人数，哪怕登陆一下也很少有更新的内容，一眼扫完X掉网页。(说到这里就不得不提下我做的<a href="http://4dian.me" title="四点网" target="_blank" rel="noopener">四点网</a>，她即使一种类SNS形式的网站，又提供给用户一些记录的服务，这样说来有点与我之前说的话自相矛盾，只抽耳光的感觉。但是我在创作过程中时刻在考虑这些问题，它仅仅占用你每天极短的时间来记录，而且用户与用户之间的“互动”也极为有限，没有消息提醒功能，没有相互关注功能，只有单向的，没有站内私信功能，没有留言板，从某种意义上来讲我还是把她限制成一块属于用户自己的宁静之地的。扯远了……)</li><li><strong>Push</strong>  当一个人设立自己的目标后最好的方法就是“闭嘴！去干。”不要向公众或朋友透露，因为这是有心理及社交理论依据的。但自己想想也是正常，可能你向大家公布，你决心要减肥的那天开始就注定了会失败。当然，目标暴露并不意味着无法继续坚持下去，从暴露的那刻起，你将获得一种新的称之为“PUSH”的力量。它可以来自你的伴侣，父母，朋友，或根本不认识的人。可是来自外界Push的力量并不会持续很久，也就是说你如何保证Push本身是坚持持续着的，另外又如何保证即使有Push你依旧能够坚持下去呢。</li><li><strong>计划反馈</strong>  没错，是时候叫GTD上场了。我正着手准备写一篇有关《<a href="http://www.zhihu.com/question/20911212" title="如何让人主动去完成一件事" target="_blank" rel="noopener">如何让人主动去完成一件事</a>》的文章。坚持是一个持续把事情做好的过程，也只有每天把计划中的事情完成掉，才可以算在坚持的过程中又累计了1天。</li><li><strong>闭嘴！去干。</strong>  这简直成了我喜欢的心理暗示的短语。你是否会做例如以下的计划或假设？ 每天背30个单词，坚持1年就可以有10000以上单词量。 如果我每天坚持**，一年之后就可以有**了。很不幸，大部分类似的假设都不会成立。</li></ol><hr><p>更多参考  </p><ol><li>一份有理论依据的第二外语学习实践指导书<a href="http://www.sdkrashen.com/Principles_and_Practice/Principles_and_Practice.pdf" title="http://www.sdkrashen.com/Principles_and_Practice/Principles_and_Practice.pdf" target="_blank" rel="noopener">http://www.sdkrashen.com/Principles_and_Practice/Principles_and_Practice.pdf</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;掌握外语的好处&quot;&gt;&lt;a href=&quot;#掌握外语的好处&quot; class=&quot;headerlink&quot; title=&quot;掌握外语的好处&quot;&gt;&lt;/a&gt;掌握外语的好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;日语  可进日企；看懂ACG；兼职笔译口译赚外快；100%享受到旅游乐趣；增加生活情趣&lt;/li&gt;
&lt;li&gt;英语  可进欧美企业；通过考研；看懂“新鲜的”技术文档；提升个人竞争力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握好一门外语，无疑是充满诱惑的。但掌握好一门外语，需要你在背后付出上千小时的努力(至少我还没见过语言有速成的，最快起码需要1年时间，而且1年出来的语言能力还不全面)。但是从另外一个方面来说，一旦你掌握了一门外语，对方想要从零超越你，那他起码也得花费上千个小时(也就是2年左右的时间)。我们真的花费了太多的时间在语言学习上面了，是否因此错过更多美丽的风景，个中付出是否值得，只有过来人才能体会。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RSS更新推送weibo服务</title>
    <link href="https://jlyu.github.io/2013/04/05/2013-04-05-rss-updates-pushed-weibo-services/"/>
    <id>https://jlyu.github.io/2013/04/05/2013-04-05-rss-updates-pushed-weibo-services/</id>
    <published>2013-04-05T00:11:00.000Z</published>
    <updated>2017-12-08T12:43:46.020Z</updated>
    
    <content type="html"><![CDATA[<p>花了2天的功夫，帮朋友做了一个rss更新推送weibo的服务应用。因为Google reader在今年的7.1就将停止提供服务了，而一时又找不到合适的代替，本来想在iffft上绑定rss后自动推的，可惜对方不提供对https协议的支持。所以只好自己写一个了。  </p><a id="more"></a><p>本来觉得应该不费多少时间，但实际做下来应该超过了20个小时，可见程序员预估时间的能力还是挺糟糕的。 这次索性把大量的任务都搬到mac上完成了。  </p><p>首先是安装mysql数据库, python-mysql安装过程相当蛋疼。然后最近又重新拾起vim，因为在Mac上我还没找到一款感觉上更好的，Mac的使用的时候没有再外接鼠标（手势太强大）所以这次的编码工作全是在vim上完成的。因为还不够熟练，所以总体上是比在windows下开发速度慢。  </p><ul><li>熟悉mac下的编程环境</li><li>全程使用vim编写代码</li><li>使用新的文件组织结构</li><li>rss的相关解析工作</li><li>weibo接口（sina,qq）调用</li><li>sae上kvdb，taskqueue，fetchurl等服务都用了一遍</li><li>各种解决问题的搜索途径</li></ul><p>总体上还为后续的维护工作做了些考虑，理论上可以为全站的rss都绑定一个或n个微博帐户，只要rss更新，weibo的更新不会慢于1分钟。  </p><p>其实做个人项目收获还是蛮多的。最后放出项目地址<a href="http://camoe.sinaapp.com" target="_blank" rel="noopener">http://camoe.sinaapp.com</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了2天的功夫，帮朋友做了一个rss更新推送weibo的服务应用。因为Google reader在今年的7.1就将停止提供服务了，而一时又找不到合适的代替，本来想在iffft上绑定rss后自动推的，可惜对方不提供对https协议的支持。所以只好自己写一个了。  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用MeCab解决日文汉字的排序问题</title>
    <link href="https://jlyu.github.io/2013/04/02/2013-04-02-mecab-solve-kanji-sort-problem/"/>
    <id>https://jlyu.github.io/2013/04/02/2013-04-02-mecab-solve-kanji-sort-problem/</id>
    <published>2013-04-02T00:10:00.000Z</published>
    <updated>2017-05-25T15:20:14.351Z</updated>
    
    <content type="html"><![CDATA[<h4 id="要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。"><a href="#要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。" class="headerlink" title="要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。"></a>要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。</h4><ol><li>尝试直接用中文系统环境下的Excle直接排序 (Windows也应该是针对每个字符对应的编码顺序进行排序的。明显地看假名排在汉字前面)</li><li>尝试用日语操作环境下的Excle排序功能(貌似非日语环境下输入的内容无法提取假名)</li><li>尝试用C#的本地化排序 <a href="http://stackoverflow.com/questions/6900061/sorting-japanese-text-by-katakana-in-c-sharp" target="_blank" rel="noopener">↗</a></li><li>尝试用数据库排序 (把数据插入数据库，然后通过数据库内部的排序机制读取)</li><li>尝试用Python</li><li>尝试用bash</li><li>其实以上都不对，考虑到日语的特殊性。如果要想字典那样排序，那么就一定需要日语汉字对应的(平)假名。提取假名就需要利用到日文分词了。比如使用 <a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html" target="_blank" rel="noopener">mecab</a></li></ol><a id="more"></a><h3 id="CentOS-5-x-具体手顺"><a href="#CentOS-5-x-具体手顺" class="headerlink" title="CentOS 5.x 具体手顺"></a>CentOS 5.x 具体手顺</h3><hr><h4 id="安装mecab"><a href="#安装mecab" class="headerlink" title="安装mecab"></a>安装mecab</h4><ul><li>下载mecab本体<blockquote><pre><code>$ wget http://mecab.googlecode.com/files/mecab-0.98.tar.gz （我用最新版一直安装不成功，于是退回0.98版）</code></pre></blockquote></li><li>解压安装 <blockquote><p>  % cd /usr/local/src<br>  % tar zxfv mecab-X.X.tar.gz<br>  % cd mecab-X.X<br>  % ./configure<br>  % make clean; make<br>  % make check<br>  % make install  </p></blockquote></li></ul><h4 id="安装词典"><a href="#安装词典" class="headerlink" title="安装词典"></a>安装词典</h4><blockquote><p>  $ wget <a href="http://mecab.googlecode.com/files/mecab-ipadic-2.7.0-20070801.tar.gz" target="_blank" rel="noopener">http://mecab.googlecode.com/files/mecab-ipadic-2.7.0-20070801.tar.gz</a><br>  $ tar zxf mecab-ipadic-2.7.0-20070801.tar.gz<br>  $ cd mecab-ipadic-2.7.0-20070801.tar.gz<br>  $ ./configure –with-charset=utf-8<br>  $ make $ sudo make install</p></blockquote><p>经行到此处，已经可以让其标注假名读音。效果如下<br><img src="http://m3.img.papaapp.com/farm4/2013/0402/12/C507EA0ED8E79D048E880F0B6A948658CE509F273FB50_500_59.jpg" alt="">  </p><p>之后可以利用bash对每条书名进行转换合成</p><pre>% mecab -Oyomi `INPUT_FILE_NAME` -o `OUTPUT_FILE_NAME`</pre>  搞定..然后还想试试mecab-python扩展，先把mecab升级到0.993  发现仍旧报错 **error: command 'gcc' failed with exit status 1**   查明是python-dev没装，继续装..>  $  yum list | grep python-dev>  $  sudo yum -y install python-dev* 之后再把yum groupinstall "Development Tools" (build-essential)  glibc-headers(libc6-dev)更新了一把，又出现 >   ./.libs/libmecab.so: undefined reference to `__sync_val_compare_and_swap_4' 错误  最后还发现gcc的版本自带4.1太低了，升级到4.4。   >   # yum -y install gcc44 gcc44-c++  再次尝试安装0.98版以上的版本  >    # ./configure --with-charset=utf8 --enable-utf8-only CXX='g++44'  >    # make && make install#### 终于可以开始安装mecab-python扩展了>  下载mecab-python [↗](http://code.google.com/p/mecab/downloads/list)  >  解压 $ tar -xzf mecab-python-0.996.tar.gz  >  安装 $ python setup.py build 提示出错，于是直接打开setup.py<pre>#!/usr/bin/env pythonfrom distutils.core import setup,Extension,osimport stringdef cmd1(str):    return os.popen(str).readlines()[0][:-1]def cmd2(str):    return string.split (cmd1(str))setup(name = "mecab-python",    version = '0.993',  #直接输入    py_modules=["MeCab"],    ext_modules = [        Extension("_MeCab",            ["MeCab_wrap.cxx",],            include_dirs=[r"/usr/local/include"], #直接输入            library_dirs=[r"/usr/local/lib"], #直接输入            libraries=['mecab stdc++']) #直接输入            ])</pre>>                $ sudo python setup.py install  这下终于把python扩展安装好了，赶紧试一下…  当>>> import MeCab 后提示又出错了 ImportError: libmecab.so.2: cannot open shared object file: No such file or directory 貌似是读不到libmecab.so.2这个文件，而它在/usr/local/lib下，网上查了似乎只需要把/usr/local/lib内写入 /etc/ld.so.conf 即可。<pre>$ sudo vim /etc/ld.so.conf include ld.so.conf.d/*.conf /usr/local/lib  #加这句$ sudo /sbin/ldconfig</pre><p><img src="http://m1.img.papaapp.com/farm5/2013/0402/16/A5113C62B2F38C881DA55F858311F69C6D3198E9A2D27_500_57.jpg" alt="">  </p><p><strong>以后就可以直接通过Python来调用MeCab了。</strong>  </p><p>(完)</p><p>####更多参考文档</p><ul><li><p>mecab-pythonのインストール方法 <a href="http://tatsuyaoiw.hatenablog.com/entry/20120414/1334405065" target="_blank" rel="noopener">http://tatsuyaoiw.hatenablog.com/entry/20120414/1334405065</a></p></li><li><p>MeCabをPythonから使う注意点とか <a href="http://shogo82148.github.com/blog/2012/12/15/mecab-python/" target="_blank" rel="noopener">http://shogo82148.github.com/blog/2012/12/15/mecab-python/</a></p></li><li><p>WindowsでMeCab Pythonを使う<a href="http://aidiary.hatenablog.com/entry/20101121/1290339360" target="_blank" rel="noopener">http://aidiary.hatenablog.com/entry/20101121/1290339360</a></p></li><li><p>CentOSにMeCabを導入<br><a href="http://d.hatena.ne.jp/yuboolike/20121207/1354869309" target="_blank" rel="noopener">http://d.hatena.ne.jp/yuboolike/20121207/1354869309</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。&quot;&gt;&lt;a href=&quot;#要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。&quot; class=&quot;headerlink&quot; title=&quot;要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。&quot;&gt;&lt;/a&gt;要对一份Excle存在的上K条由日语汉字组成的书名按50音排序。&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;尝试直接用中文系统环境下的Excle直接排序 (Windows也应该是针对每个字符对应的编码顺序进行排序的。明显地看假名排在汉字前面)&lt;/li&gt;
&lt;li&gt;尝试用日语操作环境下的Excle排序功能(貌似非日语环境下输入的内容无法提取假名)&lt;/li&gt;
&lt;li&gt;尝试用C#的本地化排序 &lt;a href=&quot;http://stackoverflow.com/questions/6900061/sorting-japanese-text-by-katakana-in-c-sharp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;↗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;尝试用数据库排序 (把数据插入数据库，然后通过数据库内部的排序机制读取)&lt;/li&gt;
&lt;li&gt;尝试用Python&lt;/li&gt;
&lt;li&gt;尝试用bash&lt;/li&gt;
&lt;li&gt;其实以上都不对，考虑到日语的特殊性。如果要想字典那样排序，那么就一定需要日语汉字对应的(平)假名。提取假名就需要利用到日文分词了。比如使用 &lt;a href=&quot;http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mecab&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rework 阅读笔记和观点</title>
    <link href="https://jlyu.github.io/2013/03/18/2013-03-18-rework-reading-notes-and-ideas/"/>
    <id>https://jlyu.github.io/2013/03/18/2013-03-18-rework-reading-notes-and-ideas/</id>
    <published>2013-03-18T00:07:00.000Z</published>
    <updated>2017-05-25T15:20:28.830Z</updated>
    
    <content type="html"><![CDATA[<p>开始实干，其他的事情都是分心的事。一头扎进去猛干，但偶尔也需要抬起头问问自己为什么要这样做。</p><a id="more"></a><p>自己是否正在做一件有意义的事情的轨迹纠正：</p><p>为什么要这么做？ 理解工作本身的意义</p><p>你在解决什么问题？ 当前的问题又是什么</p><p>这真的有用吗？我仅仅是在做一个东西，还是一个有用的东西。</p><p>你加上去的东西有价值吗？ 画蛇添足容易，画龙点睛很难。切勿把做成玩具的功能堆砌。</p><p>这种改变真的会起作用吗？ 如何检验产品给用户带来的行为模式上的转变。</p><p>还有其他更值得做的事情吗？ 真正的优先级任务队列对你来说是怎样的。</p><p>这样做值吗？ 努力诚然重要，但方向错误一切徒劳。</p><p>打岔是效率的敌人。你并不是有很多工作要做，而是你的工作不佳。而工作状态不佳是因为分心，不专注引起的。达到一种旁若无人的境界，长时间的单独工作使你达到最高效率。当你不再为了不同的任务切换思维时，你能干完一整车的活儿。要达到这种旁若无人境界是需要时间的，就象睡眠时的REM阶段一样。一个成功的独立时段意味着戒掉四处寻找碎片信息的瘾，封锁即时聊天工作，不玩手机，不开邮箱，唯一能做的就是闭嘴！干活。然后你会惊讶自己居然可以干这么多活。</p><p>该睡觉时就去睡觉。程序员很容易形成熬夜，晚睡晚起的恶性循环。它会带来例如缺乏创意，情绪失控，士气低落，顽固不化等负面作用。即使道理大多数都明白，可还是难以执行的原因还是在于晚上更容易进入旁若无人的“工作状态”。而早起不容易立马就进入最高效率的状态吧。</p><p>计划的执行。首先还是赞同各种预估和预测都是垃圾。没有人可以预测到未来。我们只能小心翼翼地把计划罗列，把大项目拆分成小项目，把小项目再拆分成各类小任务，小任务又最好能够在1-3小时内完成的。每天完成3-5项任务就颇为理想。这里的一个心理陷阱就是把todolist写的过份周详，罗列问题不等于问题解决，当你看着几十条的代办事项会突然失去开始着手第一件的勇气。任务是易细不易多，最后仍需要一步一个脚印努力完成。</p><p>“没时间”不是借口。把在网上闲逛，扯谈的各种无意义浪费掉的时候好好利用起来去完成你的想法和目标。比如每天晚睡1小时，早起30分钟，利用压缩睡眠的时间来增加你现实的活动时间是暂时可行的办法之一。但在这里也不鼓励你一开始就卯足劲开始通宵，或者四点起床来改变世界。你只需要先坚持一周的时间来检测你自己究竟是真心实意还是三分钟热度。一旦不成再直接该回原来的作息娱乐好了，不担风险，没有损失，还挺划算的不是吗。如果你真的拥有极为强烈的某种渴望时，你就会想尽办法挤出时间来。而事实上大部分的人都不曾拥有如此强烈的欲望，所以也总是用“没时间”作为借口来进行自我保护。不要再扔出一堆丢人的借口和抱怨了，没有人愿意听，你的终极目标就是让你自己的目标实现，这事必须你自己花时间来做。</p><p>让自己变得与众不同。only dead fish go with the flow.  一个人要变得与众不同，那有一项能力就显得至关重要：独立思考的能力。人云亦云是没有出路的，复制别人的观点和话有意思吗？没有经过自己大脑思考出来的东西实际上不属于你。处理问题时，如何看破事情的本质，并朝着这个方向努力？很多时候并没有关注一件事最核心的地方，相反地在并不重要的地方花费了太多的时间和精力。朝着问题的本质，有价值的方向去努力，这样你的用户才可能对你说：嘿，这个东西让我的生活变得更美好了。</p><p>拥抱简单。程序员容易陷入这样的迷局，在编码的时候故意加入足够复杂度（或者说足够有技术含量的）代码。我们会沉迷用复杂的方法去解决问题，这种行为导致的后果就是一开始写的人很爽，但事后维护的人就会连死的人都有了（很多情况下，维护的那个人就是时隔几个月的你自己）。抛开代码级别角度，用户从产品角度来使用你的代码效果时，他们不会在乎那上千上万行的代码，或者某个功能点背后需要付出的努力，他们关心只是能不能及时用上你的产品，好不好用，体验如何，是否免费等问题。如果说，同样是实现一个功能，使用简单的方法和复杂的方法究竟会选择哪个？可能多少有过编程经验的人都会拥抱前者。解决问题的途径往往不只一条路，要能认识到问题是可以变通转化的。所以也总能用一个简单又平常的方法去解决问题，那同时也就意味着不需要超炫的表现，没有炫技的机会，只要找个办法把问题解决了就行，然后赶紧去办下一件事去。虽然这样做没能让你心理满足（？）但它确实有效地能让你不断前行。我在“发布”和“完美”中间做决策时，往往还是选择了先发布。因为其背后有一个观点可以支持我：以后你随时可以把“简单，刚好”再变成“复杂，完美”。</p><p>退出“英雄模式”。一开始你预估一项任务只需2个小时完成，然后一转眼4个小时过去了，任务看来还没有搞定的迹象。于是，你进入了英雄模式。今晚通宵一把，尝试牺牲睡眠时间来解决棘手问题，而这种“有害的”过度努力会使人超负荷运转，可能最终即使解决了问题也使自己精力耗尽。这样做是否值得？及时止损是一种勇气，人们容易把放弃和失败联系起来，但有时候就应该这么做！如果在不值得的事情上浪费了很多时间，那就赶快放下吧。失去的时间是再也不会回来了，而现在比这更糟糕的是莫过于继续浪费时间。知难而退</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始实干，其他的事情都是分心的事。一头扎进去猛干，但偶尔也需要抬起头问问自己为什么要这样做。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2012年数字年鉴</title>
    <link href="https://jlyu.github.io/2013/01/03/2013-01-03-2012%E6%95%B0%E5%AD%97%E5%B9%B4%E9%89%B4/"/>
    <id>https://jlyu.github.io/2013/01/03/2013-01-03-2012数字年鉴/</id>
    <published>2013-01-03T08:00:00.000Z</published>
    <updated>2017-05-25T16:09:10.945Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.douban.com/note/193124611/" rel="nofollow" target="_blank">2012年目标</a><span>达成度100%，但若加上加上不可抗力且非凭己努力便可达到之目标，总体上只有80%吧。</span><br><br><br><a id="more"></a></p><p><img src="http://media.tumblr.com/db03ec27006e76b0ac34ca91b5dd64b2/tumblr_inline_mg2wgzLwfb1rqghq6.jpg"></p><br><span>✎精神世界</span><br><span>2012年阅读数目: </span><a href="http://www.douban.com/group/topic/26780415/" rel="nofollow" target="_blank">50</a><span> (英语4本,日语4本,买书欲望跟去年持平，略超￥4000)</span><br><span>2012年观影数目：</span><a href="http://movie.douban.com/doulist/326628/" rel="nofollow" target="_blank">98</a><span> (电影院14次，动画まどか/FZ/FSN/CL/SAO/AW皆印象深刻让我对无节操的日本动画业界恢复了信心，最佳美剧POI)</span><br><span>2012年听歌曲目：按豆瓣电台的统计约</span><a href="http://douban.fm/mine?type=played" rel="nofollow" target="_blank">5000</a><span>首，虾米那边累计是</span><a href="http://www.xiami.com/event/threeyears-ufo/userid/2067731" rel="nofollow" target="_blank">16195</a><span>首，Jing和落无统计。</span><br><br><span>✎现实世界</span><br><span>2012年背单词366天，累计</span><a href="http://www.shanbay.com/user/list/chain233/" rel="nofollow" target="_blank">685</a><span>天，小组排名</span><a href="http://www.shanbay.com/team/detail/16/" rel="nofollow" target="_blank">4</a><span> (听说仍待提高，读写</span><a href="http://space.yeeyan.org/u/311527" rel="nofollow" target="_blank">译</a><span>尚可)</span><br><span>2012年跑过的距离：超过</span><a href="http://www.dailymile.com/people/yujnln" rel="nofollow" target="_blank">100</a><span>km </span><br><span>2012年去过的地方: 0 (又是没有任何旅行见闻的一年，每周往返于家/公司/学校，线下聚会9次)</span><br><span>2012年写下的文字：148篇；各类微博：约</span><a href="http://weibo.com/chain" rel="nofollow" target="_blank">1000</a><span>条 ，订阅博客69位，看过的文字量估计已经超过百万。</span><br><span>2012年参加技术讲座：3次</span><br><span>2012年学习的时间量:</span><a href="http://www.douban.com/group/topic/23786814/" rel="nofollow" target="_blank"> 1,878</a><span>小时</span><p></p><br><div class="cc"><img alt="7月-12月每日时间记录" src="http://img3.douban.com/view/note/large/public/p7723180.jpg"><div class="pl">7月-12月每日时间记录</div><br></div><br><br><div class="ll"><img alt="" src="http://img3.douban.com/view/note/large/public/p7723201.jpg"></div><br><p><span> </span><br><span>  </span><br><br><br><span>  Programming 318H 33%</span><br><span>  Learning 298H 31%</span><br><span>  English 168H 18%</span><br><span>  MSE 126H 13%</span><br><span> </span><br><br><span>✎程序世界</span><br><span>年初开始学习 Python,MySQL,Django,webpy,Git,HTML,vim,GAE,Sphinx; 年中学习Linux,shell; 年末学习了SAE,css,bootstrap,JavaScript,jQuery,Tornado。</span><br><span>2012年见识了太多厉害的程序猿，其中传说级别的3位。作为我自己，仍然有非常多的东西有待学习和提高。仍需努力..</span><br><br><span>练手做过的</span><a href="http://chainproject.sinaapp.com/" rel="nofollow" target="_blank">Project</a><span>:</span><br><span>▶</span><a href="http://chainwords.sinaapp.com/" rel="nofollow" target="_blank">CET超爽背单词</a><span> </span><br><span>▶</span><a href="http://chainguest.sinaapp.com/" rel="nofollow" target="_blank">留言板系统</a><br><span>▶</span><a href="http://jscms.sinaapp.com/about" rel="nofollow" target="_blank">贸易公司进销存管理系统</a><br><span>▶</span><a href="http://chainproject.sinaapp.com/jiepang" rel="nofollow" target="_blank">街旁每日自动签到服务</a><br><span>▶</span><a href="http://4dian.sinaapp.com/" rel="nofollow" target="_blank">四点网 &#8212;晨型人自我学习管理社区</a><span> (广告：寻美工/设计/移动端开发合作)</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.douban.com/note/193124611/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;2012年目标&lt;/a&gt;&lt;span&gt;达成度100%，但若加上加上不可抗力且非凭己努力便可达到之目标，总体上只有80%吧。&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="yearly" scheme="https://jlyu.github.io/categories/yearly/"/>
    
    
  </entry>
  
  <entry>
    <title>回顾3年来观影感悟</title>
    <link href="https://jlyu.github.io/2012/11/13/2012-11-13-3/"/>
    <id>https://jlyu.github.io/2012/11/13/2012-11-13-3/</id>
    <published>2012-11-13T08:00:00.000Z</published>
    <updated>2017-05-25T15:20:58.400Z</updated>
    
    <content type="html"><![CDATA[<p><ul><li>三年前也就是2009-11-13在豆瓣写上了自己的状态：“最近真的不在状态。”</li></ul></p><p><li>三年后的今天2012-11-14仔细想想还是能写上这样：“最近真的不在状态。”</li><br><blockquote></blockquote></p><a id="more"></a><p></p><p>事情过去了，再怎么做也与事无补，可已经拼命地在做了。勇敢一点，不然会后悔一辈子…老是说“如果”，这样根本没完没了。</p><p></p><p></p><p>自分の存在する理由を聞きとがめ、自分が戦う意志を動揺不定、戦死にいたるまで想像より凄まじき恐怖感、毎回不愉快な経験は精神を苛立つ。即使在这个随时随地都可以把你替代了的世界上，也不要摆出一张消极的脸嘛，你会错失许多许多有趣的事。不要逃避，嗯。</p><br><p></p><blockquote><br><p>ひとり暮らしの夜は長く感じた。うまく時間を過ごせないときはぼくは近くの駅まで歩き、誰かを待っている振りをしながら時間を潰してそれにもあきると家までの帰り道をなるべくゆっくりと歩いた。高校に友達がいたけれとも制服を着ている時以外はどうしてかあまりいっしょにいたいと思わなかった。3,000万以上の人間が住む街で考えてみれば会いたい人も話したいも僕には誰もいなかった。</p><br></blockquote><br><blockquote><br><p>幸せって一体どんなものだっただろうと思わせる。ドン底でも幸福でも人生の流れの中でどっちでもある。どっちでもあるなら、どっちでもいいじゃねえかなと思えった。</p><br></blockquote><br><blockquote><br><p>真の恐怖は大事なものが奪われること。よって、恐怖に立ち向かうように大事なものをいのちをかけても必死に守ることとしんじていいんですか？わたしはうばうがわにまわる。</p><br></blockquote><br><blockquote><br><p>痛みを伴わない教訓には意義が無い。人には何かの犠牲なしには、何も得ることが出来ないのだから。しかし、この痛みに耐え、乗り越えた時、人は何物にも負けない強靭な心を手に入れる。鋼のような心</p><br></blockquote><br><blockquote><br><p>甘えを捨てだれにも頼らず、ひたすら一人を求め、か弱い存在から強い心且つ強靱なキャラーへと成し遂げるまで何度も繰り返さなけねばならないのか。けれど、最高のターゲットの前にいたって代価として自分のすべてを捧げようにしても構わない</p><br></blockquote><br><blockquote><br><p>悲しみを背負う人しか究極奥義『無想転生』まで悟らない。つまりすべてが無、無からすべてを生み出す。</p><br></blockquote><br><blockquote><br><p>人は理想の自分を超えられない。「架空の理想の人物」を作り、そいつならどうするか、を徹底的に「マネ」してみた。マネって勉強するってことなんだ。つまり究極の勉強方法ってこと。</p><br></blockquote><br><blockquote><br><p>人は意識しないと群がってしまう動物なのだ。1人で行動することを「寂しいですね」と言う人は、他の人のために自分の人生を削っていることに気づかなければならない。</p><br></blockquote><br><blockquote><br><p>无论你需要直面的现实是多么地残酷，人都将因为自己的梦想而得到救赎。成功的黎明前总是孤独的在黑暗中无尽求索和受苦。</p><br></blockquote><br><blockquote><br><p>有所保留就是仍怀有无限希望。心存希望同时也会被拽入绝望的深渊。扔掉恐惧与愤怒的保险带，全力以赴的舍身一击才有可能换来人生的崛起。</p><br></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul&gt;&lt;li&gt;三年前也就是2009-11-13在豆瓣写上了自己的状态：“最近真的不在状态。”&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;三年后的今天2012-11-14仔细想想还是能写上这样：“最近真的不在状态。”&lt;/li&gt;&lt;br&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="reincarnation" scheme="https://jlyu.github.io/categories/reincarnation/"/>
    
    
  </entry>
  
  <entry>
    <title>向死而生</title>
    <link href="https://jlyu.github.io/2012/11/11/2012-11-11-%E5%90%91%E6%AD%BB%E8%80%8C%E7%94%9F/"/>
    <id>https://jlyu.github.io/2012/11/11/2012-11-11-向死而生/</id>
    <published>2012-11-11T08:00:00.000Z</published>
    <updated>2018-08-09T14:52:34.333Z</updated>
    
    <content type="html"><![CDATA[<p>3:30ごろ目を覚めた。 </p><p>腹の所は激痛だったのだ。<br>痛みの電流はわたしの全身から走り回ているみたいだったのだ。<br>わたしはその時このまま死んでも構わないだろうとさえ思いやがった。  </p><p>何もかもが始まらないし終わろうともしなかった。<br>だからいっそう全てを投げやりにして死んでゆくが良いのさ。<br>未練なし、人はいずれ死ぬという定めがずっと前から決めされたものだった。<br>その時の意識は明白だった、決して寝ぼけだったりしていなかった。<br>自分の意志で物事を考え、その結論でも思い浮かべていた。<br>救いもういらないし、同情とされることもなおさらだ。<br>自ら死を求めている。もし今夜死んでくれたら死なせてほしい。<br>こんな発想は止められなかったにもかかわらず痛みは止まなかった。<br>わたしは何の声も出さずにじっとしてて苦しみを耐え切った。<br>突然、わたしがあることに気付いた。<br>それはわたしが死を恐れぬことだ。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3:30ごろ目を覚めた。 &lt;/p&gt;
&lt;p&gt;腹の所は激痛だったのだ。&lt;br&gt;痛みの電流はわたしの全身から走り回ているみたいだったのだ。&lt;br&gt;わたしはその時このまま死んでも構わないだろうとさえ思いやがった。  &lt;/p&gt;
&lt;p&gt;何もかもが始まらないし終わろうともしなかった。&lt;b
      
    
    </summary>
    
      <category term="reincarnation" scheme="https://jlyu.github.io/categories/reincarnation/"/>
    
    
  </entry>
  
  <entry>
    <title>Double</title>
    <link href="https://jlyu.github.io/2012/11/10/2012-11-10-double-single/"/>
    <id>https://jlyu.github.io/2012/11/10/2012-11-10-double-single/</id>
    <published>2012-11-10T08:00:00.000Z</published>
    <updated>2018-08-09T14:52:48.388Z</updated>
    
    <content type="html"><![CDATA[<p><strong>仕事</strong></p><br><p>　今週いっぱいプロジェクト三つに追われた。一つ、『单片机C源码转VC++的基于UART协议RS232串口通信数据采集程序』(全部片付けたらまとめて経験文でも書こう)；一つ、前のÇ+＋プロジェクトパフォーマンスの最適化、要件変更と機能追加とのことだ。一つ、あるウェブアプリケーションの開発。主に自己の学習に関するサイトを作り出したいんだ。</p><p><strong>学校</strong></p><br><p>　相変わらずに週末の勉強にやる気はまったく出てこうなくなってた。それに、日曜で起きた悲惨なことにクラスメートのチェックインの偽造することがバレちゃった。先生はものすごく怒られ、事件の真実を最後まで追求するといったような宣言をしたが、幸い救済措置間に合って先生の機嫌も取り戻した。何となく一つの難関を突破した。しかし、その代価はあまり重いや。</p><br><p><strong>生活</strong></p><br><p>　『青い文学シリーズ』を満喫した。なんか日本の名作にハマちゃった。人、人間、人としての人間らしさ。こころ、信頼、所々まで綿密な筆が素晴らしい。克明にわたしのこころに印を残してくれた。</p><br><ul><li>太宰治　　『人間失格』『走れメロス』</li><br><li>夏目瀬石　『こころ』</li><br><li>芥川龍之介『鼻』『蜘蛛の糸』『地獄変』</li><br><li>坂口安吾　『桜森の満開中の下』</li><br></ul><p>出来れば以上リストされた項目の原作をこの目で見てみたい。したし、こう云う陰湿な内容を見過ぎでわたしはますます人間不信になってしまうかもわからない…</p><br><p>4dian网个人页面原型</p><br><p><img src="http://media.tumblr.com/tumblr_mdbqck7VEe1rqghq6.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;仕事&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;　今週いっぱいプロジェクト三つに追われた。一つ、『单片机C源码转VC++的基于UART协议RS232串口通信数据采集程序』(全部片付けたらまとめて経験文でも書こう)；一つ、前のÇ+＋プロジェクトパフォーマンスの最適
      
    
    </summary>
    
      <category term="weekly" scheme="https://jlyu.github.io/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>手に負えないことをやらなきゃ</title>
    <link href="https://jlyu.github.io/2012/10/13/2012-10-13-9-12m-todo-list/"/>
    <id>https://jlyu.github.io/2012/10/13/2012-10-13-9-12m-todo-list/</id>
    <published>2012-10-13T08:00:00.000Z</published>
    <updated>2018-08-09T14:54:29.974Z</updated>
    
    <content type="html"><![CDATA[<p>这81天我干了些啥  </p><p><img src="http://media.tumblr.com/tumblr_maaj1fGOq31rqghq6.png"></p><br><p>这周周末开学了，于是惯例做下9月-12月的计划。接下来的4个月会插入MSE的标签。</p><br><pre><span class="term_note"><strong>日常记事</strong></span></pre><br><ul><li><strike>09月中旬<a href="http://www.kobaioh.com/special/20120913_half_canpaign/" target="_blank">购买王</a>『からくりサーカス』14-16</strike></li><br><li>12月中旬<a href="http://www.kobaioh.com/special/20120913_half_canpaign/" target="_blank">购买王</a>『からくりサーカス』17-19</li><br></ul><pre><span class="term_note"><strong>MSE课程</strong></span></pre><br><ul><li><strike>课程表的确认与作成</strike></li><br><li><strike>教材的购买</strike></li><br><li><strike>9月11日开始 (误)  CET6网上报名，12月底陪同学再刷一次成绩</strike></li><br><li><strike>150~300 words Abstract  (Deadline-10-06)</strike></li><br><li><strike>SAE平台介绍PPT作成及演讲 (Deadline-10-13)</strike></li><br><li><strike>高级软件工程的选题和组队 (Deadline-10-18)</strike></li><br><li>基于SAE的企业库存管理系统实现研究报告  (Deadline-11-30)</li><br><li>Chain Challenge CET6 one more time  (Deadline-12-15)</li><br><li>知识产权主题相关论文3500字 (Deadline-12-10|20)</li><br><li>基于Hadoop建立的反向索引应用 (Deadline-2012 later)</li><br><li>基于HBase建立数据表  (Deadline-2012 later)</li><br><li><strike>Web App: 贸易公司进销存管理系统 (Deadline-2012 later)</strike></li><br></ul><pre><span class="term_note"><strong>学习计划</strong></span></pre><br><ul><li><strike>学习JavaScript和JQuery</strike></li><br><li><strike><a href="http://tmblr.co/ZXEE7vTXlme-" target="_blank">基于SAE的进销存管理系统的技术实现</a> (Deadline: 8W→11.11) </strike></li><br><li>《HTTP权威指南》先速读扫一遍，700多页的大部头。</li><br><li>《Shell脚本学习指南》学完， 能用shell写一份装机用script。深入了解文本处理命令</li><br><li><a href="http://coolshell.cn/articles/1379.html" target="_blank">bash脚本调试</a> </li><br><li>Linux 模块化系统操作的Review，先列目录，如下。</li><br><li>Linux CLI 修改 font，<strike>color</strike></li><br><li>学习下VIM的Vundle插件 </li><br><li><strike>重装Debian，手动分区。安装chrome，VMware，nutcloud，git，配置编程环境，</strike>PDF阅读软件，Openoffice办公软件(可选)，用thunderbird收发邮件</li><br><li>学习gnupg和签名技术</li><br></ul><pre><span class="term_note"><strong>Linux目录</strong></span></pre><br><ul><li>1. <strong>系统架构</strong></li><br><ul><li>修改运行级别并关闭或重启系统</li><br></ul><li>2. <strong>Linux 安装和包管理</strong></li><br><ul><li>硬件布局</li><br><li>引导管理器</li><br><li>管理共享库</li><br><li>[+]Debian 包管理</li><br><li>[+]使用 RPM 和 YUM 包管理 →  <a href="http://tmblr.co/ZXEE7vT6XOAm" target="_blank">Linux 软件包管理</a> (rpm dpkg yum apt-get)</li><br></ul><li>3. <strong>GNU 和 UNIX 命令</strong></li><br><ul><li>[+]<a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-103-1/" target="_blank">Linux命令行</a>(bash echo env set exec uname history)</li><br><li>[+]<a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-103-2/" target="_blank">文本流和过滤器</a>(cat od split wc expend pr ln fmt sort uniq cut paste join)</li><br><li>[+]<a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-103-3/" target="_blank">文件和目录管理</a>(ls cp mv rm mkdir touch file gzip bzip2 dd) → <a href="http://tmblr.co/ZXEE7vT7AqkR" target="_blank">Linux 文件打包,压缩,解压</a> (tar) ,  <a href="http://tmblr.co/ZXEE7vTEJpZa" target="_blank">Linux 文件查找</a> (where type whereis find locate updatedb)</li><br><li>[+]<a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-103-4/" target="_blank">流、管道和重定向</a> → <a href="http://tmblr.co/ZXEE7vTAITgV" target="_blank">Linux 数据流重定向</a></li><br><li>[+]创建、监视和终止进程</li><br><li>进程执行优先级</li><br><li>正则表达式搜索文本文件</li><br><li>[+]<a href="http://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-103-8/" target="_blank">使用 vi 编辑</a> → Tag:vim</li><br></ul><li>4. <strong>设备、文件系统、文件系统层次标准(FHS)</strong></li><br><ul><li>创建分区和文件系统</li><br><li>维护文件系统的完整性</li><br><li>控制文件系统的装载和卸载</li><br><li>管理磁盘配额</li><br><li>管理文件权限和所有权</li><br><li>[+]创建和修改硬链接和符号链接</li><br><li>[+]查找系统文件<strong> → </strong></li><br></ul><li><em> Shell、脚本化和数据管理</em></li><br><li> 用户接口和桌面</li><br><li><em> 管理任务</em></li><br><li> 系统服务</li><br><li><em> 网络知识</em></li><br><li> 系统安全</li><br><li><strike>看完  <a href="http://coolshell.cn/tag/linux" target="_blank"><a href="http://coolshell.cn/tag/linux" target="_blank">http://coolshell.cn/tag/linux</a></a></strike></li><br><li><strike>看完  <a href="http://shell909090.com/blog/tag/debian/" target="_blank"><a href="http://shell909090.com/blog/tag/debian/" target="_blank">http://shell909090.com/blog/tag/debian/</a></a></strike></li><br></ul><p>想到再写..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这81天我干了些啥  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://media.tumblr.com/tumblr_maaj1fGOq31rqghq6.png&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这周周末开学了，于是惯例做下9月-12月的计划。接下来的4个月会插入MSE的标签。&lt;/
      
    
    </summary>
    
      <category term="todo" scheme="https://jlyu.github.io/categories/todo/"/>
    
    
  </entry>
  
</feed>
